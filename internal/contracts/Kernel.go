// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ExecutorManagerExecutorConfig is an auto generated low-level Go binding around an user-defined struct.
type ExecutorManagerExecutorConfig struct {
	Hook common.Address
}

// PackedUserOperation is an auto generated low-level Go binding around an user-defined struct.
type PackedUserOperation struct {
	Sender             common.Address
	Nonce              *big.Int
	InitCode           []byte
	CallData           []byte
	AccountGasLimits   [32]byte
	PreVerificationGas *big.Int
	GasFees            [32]byte
	PaymasterAndData   []byte
	Signature          []byte
}

// SelectorManagerSelectorConfig is an auto generated low-level Go binding around an user-defined struct.
type SelectorManagerSelectorConfig struct {
	Hook     common.Address
	Target   common.Address
	CallType [1]byte
}

// ValidationManagerPermissionConfig is an auto generated low-level Go binding around an user-defined struct.
type ValidationManagerPermissionConfig struct {
	PermissionFlag [2]byte
	Signer         common.Address
	PolicyData     [][22]byte
}

// ValidationManagerValidationConfig is an auto generated low-level Go binding around an user-defined struct.
type ValidationManagerValidationConfig struct {
	Nonce uint32
	Hook  common.Address
}

// KernelMetaData contains all meta data concerning the Kernel contract.
var KernelMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_entrypoint\",\"type\":\"address\",\"internalType\":\"contractIEntryPoint\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"fallback\",\"stateMutability\":\"payable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"accountId\",\"inputs\":[],\"outputs\":[{\"name\":\"accountImplementationId\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"changeRootValidator\",\"inputs\":[{\"name\":\"_rootValidator\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"},{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"},{\"name\":\"validatorData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hookData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"currentNonce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"entrypoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIEntryPoint\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"execute\",\"inputs\":[{\"name\":\"execMode\",\"type\":\"bytes32\",\"internalType\":\"ExecMode\"},{\"name\":\"executionCalldata\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"executeFromExecutor\",\"inputs\":[{\"name\":\"execMode\",\"type\":\"bytes32\",\"internalType\":\"ExecMode\"},{\"name\":\"executionCalldata\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"returnData\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"executeUserOp\",\"inputs\":[{\"name\":\"userOp\",\"type\":\"tuple\",\"internalType\":\"structPackedUserOperation\",\"components\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"initCode\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"callData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"accountGasLimits\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"preVerificationGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasFees\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"paymasterAndData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"userOpHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"executorConfig\",\"inputs\":[{\"name\":\"executor\",\"type\":\"address\",\"internalType\":\"contractIExecutor\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structExecutorManager.ExecutorConfig\",\"components\":[{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_rootValidator\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"},{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"},{\"name\":\"validatorData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hookData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"initConfig\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"installModule\",\"inputs\":[{\"name\":\"moduleType\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"initData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"installValidations\",\"inputs\":[{\"name\":\"vIds\",\"type\":\"bytes21[]\",\"internalType\":\"ValidationId[]\"},{\"name\":\"configs\",\"type\":\"tuple[]\",\"internalType\":\"structValidationManager.ValidationConfig[]\",\"components\":[{\"name\":\"nonce\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"}]},{\"name\":\"validationData\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"hookData\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"invalidateNonce\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"isAllowedSelector\",\"inputs\":[{\"name\":\"vId\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"},{\"name\":\"selector\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isModuleInstalled\",\"inputs\":[{\"name\":\"moduleType\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"additionalContext\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isValidSignature\",\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"onERC1155BatchReceived\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"onERC1155Received\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"onERC721Received\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"permissionConfig\",\"inputs\":[{\"name\":\"pId\",\"type\":\"bytes4\",\"internalType\":\"PermissionId\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structValidationManager.PermissionConfig\",\"components\":[{\"name\":\"permissionFlag\",\"type\":\"bytes2\",\"internalType\":\"PassFlag\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"contractISigner\"},{\"name\":\"policyData\",\"type\":\"bytes22[]\",\"internalType\":\"PolicyData[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"rootValidator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"selectorConfig\",\"inputs\":[{\"name\":\"selector\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structSelectorManager.SelectorConfig\",\"components\":[{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"},{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"callType\",\"type\":\"bytes1\",\"internalType\":\"CallType\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsExecutionMode\",\"inputs\":[{\"name\":\"mode\",\"type\":\"bytes32\",\"internalType\":\"ExecMode\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"supportsModule\",\"inputs\":[{\"name\":\"moduleTypeId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"uninstallModule\",\"inputs\":[{\"name\":\"moduleType\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deInitData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"uninstallValidation\",\"inputs\":[{\"name\":\"vId\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"},{\"name\":\"deinitData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hookDeinitData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"upgradeTo\",\"inputs\":[{\"name\":\"_newImplementation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"validNonceFrom\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateUserOp\",\"inputs\":[{\"name\":\"userOp\",\"type\":\"tuple\",\"internalType\":\"structPackedUserOperation\",\"components\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"initCode\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"callData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"accountGasLimits\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"preVerificationGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasFees\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"paymasterAndData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"userOpHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"missingAccountFunds\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"validationData\",\"type\":\"uint256\",\"internalType\":\"ValidationData\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"validationConfig\",\"inputs\":[{\"name\":\"vId\",\"type\":\"bytes21\",\"internalType\":\"ValidationId\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structValidationManager.ValidationConfig\",\"components\":[{\"name\":\"nonce\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"hook\",\"type\":\"address\",\"internalType\":\"contractIHook\"}]}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ModuleInstalled\",\"inputs\":[{\"name\":\"moduleTypeId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ModuleUninstallResult\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"result\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ModuleUninstalled\",\"inputs\":[{\"name\":\"moduleTypeId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NonceInvalidated\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PermissionInstalled\",\"inputs\":[{\"name\":\"permission\",\"type\":\"bytes4\",\"indexed\":false,\"internalType\":\"PermissionId\"},{\"name\":\"nonce\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PermissionUninstalled\",\"inputs\":[{\"name\":\"permission\",\"type\":\"bytes4\",\"indexed\":false,\"internalType\":\"PermissionId\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Received\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RootValidatorUpdated\",\"inputs\":[{\"name\":\"rootValidator\",\"type\":\"bytes21\",\"indexed\":false,\"internalType\":\"ValidationId\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SelectorSet\",\"inputs\":[{\"name\":\"selector\",\"type\":\"bytes4\",\"indexed\":false,\"internalType\":\"bytes4\"},{\"name\":\"vId\",\"type\":\"bytes21\",\"indexed\":false,\"internalType\":\"ValidationId\"},{\"name\":\"allowed\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TryExecuteUnsuccessful\",\"inputs\":[{\"name\":\"batchExecutionindex\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"result\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Upgraded\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorInstalled\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIValidator\"},{\"name\":\"nonce\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorUninstalled\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIValidator\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"EnableNotApproved\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExecutionReverted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InitConfigError\",\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"InvalidCallType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExecutor\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidFallback\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidMode\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidModuleType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidNonce\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSelector\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidValidationType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidValidator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NonceInvalidationError\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSupportedCallType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyExecuteUserOp\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PermissionDataLengthMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PermissionNotAlllowedForSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PermissionNotAlllowedForUserOp\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PolicyDataTooLarge\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PolicyFailed\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"PolicySignatureOrderError\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RootValidatorCannotBeRemoved\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SignerPrefixNotPresent\",\"inputs\":[]}]",
	Bin: "0x61014060405234801561001157600080fd5b506040516172093803806172098339810160408190526100309161015a565b306080524660a05260608061007a604080518082018252600681526512d95c9b995b60d21b60208083019190915282518084019093526005835264302e332e3160d81b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152808501939093528281019190915246606083015230608083015260a0909120610100526001600160a01b03851661012052805163deadbeef60e01b92810192909252805160048184030181526024909201905261011b9250905061018a565b7f7bcaa2ced2a71450ed5a9a1b4848e8e5206dbc3f06011e595f7f55428cc6f84f80546001600160a81b03191660589290921c919091179055506101c8565b60006020828403121561016c57600080fd5b81516001600160a01b038116811461018357600080fd5b9392505050565b805160208201516001600160581b03198116919060158210156101c1576001600160581b0319601583900360031b81901b82161692505b5050919050565b60805160a05160c05160e0516101005161012051616fa5610264600039600081816102ef0152818161069401528181610cb701528181610fec015281816111b6015281816115a301528181611a7101528181611b9501528181611d590152818161253901528181612e6b015261303c0152600061465b01526000614715015260006146ef0152600061469f0152600061467c0152616fa56000f3fe6080604052600436106101d15760003560e01c80639517e29f116100f7578063c3e5897811610095578063e9ae5c5311610064578063e9ae5c53146107ef578063f1f7f0f914610802578063f23a6e6114610830578063f2dc691d1461085d57610210565b8063c3e589781461076f578063d03c79141461079c578063d691c964146107bc578063e6f3d50a146107dc57610210565b8063a71763a8116100d1578063a71763a8146106ce578063adb610a3146106e1578063b8afe17d146106f6578063bc197c811461074057610210565b80639517e29f1461062a5780639cfd7cff1461063d578063a65d69d41461068257610210565b806352141cd91161016f57806384b0196e1161013e57806384b0196e146105b25780638dd7712f146105da57806390ef8862146105ed5780639198bdf51461061757610210565b806352141cd9146104ed57806357b3a5f4146105005780636e6fa0c61461055a578063721e67f41461057a57610210565b806319822f7c116101ab57806319822f7c146104845780631f1b92e3146104a55780633659cfe6146104ba5780633c3b752b146104cd57610210565b8063112d3a7d146103ea578063150b7a021461041f5780631626ba7e1461046457610210565b3661021057604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b60006102276000356001600160e01b03191661087d565b604080516060808201835283546001600160a01b039081168084526001909501549081166020840152600160a01b900460f81b6001600160f81b03191692820192909252925060009161028d57604051631cd4b64760e21b815260040160405180910390fd5b82516060906001600160a01b03166001148015906102b6575083516001600160a01b0390811614155b156102d15783516102ca90346000366108b7565b905061032d565b83516001600160a01b03908116900361032d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461032d576040516348f5c3ed60e01b815260040160405180910390fd5b604084015161033d90600061093c565b156103595761034f8460200151610953565b909350915061039e565b6040840151610370906001600160f81b031961093c565b156103855761034f84602001516000366109a3565b604051632d6a6bb760e01b815260040160405180910390fd5b826103ab57815160208301fd5b83516001600160a01b03166001148015906103d1575083516001600160a01b0390811614155b156103e25783516103e290826109d2565b815160208301f35b3480156103f657600080fd5b5061040a610405366004615f19565b610a34565b60405190151581526020015b60405180910390f35b34801561042b57600080fd5b5061044b61043a366004615f74565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610416565b34801561047057600080fd5b5061044b61047f366004615fe6565b610b09565b61049761049236600461604a565b610caa565b604051908152602001610416565b6104b86104b33660046160ab565b610fc5565b005b6104b86104c83660046160c6565b61119c565b3480156104d957600080fd5b506104b86104e836600461613f565b6113b5565b6104b86104fb366004616205565b611589565b34801561050c57600080fd5b5061052061051b3660046162b1565b61191e565b6040805182516001600160a01b03908116825260208085015190911690820152918101516001600160f81b03191690820152606001610416565b34801561056657600080fd5b5061040a6105753660046162ce565b61198a565b34801561058657600080fd5b5061059a6105953660046160c6565b6119d2565b60405190516001600160a01b03168152602001610416565b3480156105be57600080fd5b506105c7611a08565b6040516104169796959493929190616355565b6104b86105e83660046163ed565b611a66565b3480156105f957600080fd5b50610602611b5e565b60405163ffffffff9091168152602001610416565b6104b86106253660046164c2565b611b7b565b6104b8610638366004615f19565b611d3f565b34801561064957600080fd5b5060408051808201825260168152756b65726e656c2e616476616e6365642e76302e332e3160501b60208201529051610416919061663d565b34801561068e57600080fd5b506106b67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610416565b6104b86106dc366004615f19565b61251f565b3480156106ed57600080fd5b50610602612b78565b34801561070257600080fd5b50610716610711366004616650565b612b95565b60408051825163ffffffff1681526020928301516001600160a01b03169281019290925201610416565b34801561074c57600080fd5b5061044b61075b36600461666b565b63bc197c8160e01b98975050505050505050565b34801561077b57600080fd5b5061078f61078a3660046162b1565b612bfd565b604051610416919061671f565b3480156107a857600080fd5b5061040a6107b73660046167a2565b612cd9565b6107cf6107ca366004615fe6565b612dc6565b60405161041691906167bb565b6104b86107ea366004616820565b612e51565b6104b86107fd366004615fe6565b613022565b34801561080e57600080fd5b506108176131db565b6040516001600160581b03199091168152602001610416565b34801561083c57600080fd5b5061044b61084b366004616887565b63f23a6e6160e01b9695505050505050565b34801561086957600080fd5b5061040a6108783660046167a2565b6131ee565b6001600160e01b03191660009081527f7c341349a4360fdd5d5bc07e69f325dc6aaea3eb018b3e0ea7e53cc0bb0d6f3b6020526040902090565b60405163d68f602560e01b81526060906001600160a01b0386169063d68f6025906108ec90339088908890889060040161690d565b6000604051808303816000875af115801561090b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109339190810190616966565b95945050505050565b6001600160f81b0319828116908216145b92915050565b6000606060408051368101909152366000823760408051601481019091523360601b9052600080366014018382885af192505060405190503d8152602081013d6000823e3d810160405250915091565b604051600090828482376000388483885af491503d8152602081013d6000823e3d810160405250935093915050565b604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da906109fe90849060040161663d565b600060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b505050505050565b600060018503610a91576000610a4861320e565b6001016000610a5d8760581b600160f81b1790565b6001600160581b0319168152602081019190915260400160002054600160201b90046001600160a01b031614159050610b01565b60028503610ab7576000610aa485613232565b546001600160a01b031614159050610b01565b60038503610afd576001600160a01b038416610ae8610ada6004600086886169d8565b610ae391616a02565b61087d565b600101546001600160a01b0316149050610b01565b5060005b949350505050565b600080610b1461320e565b90506000366000610b25878761326b565b925092509250610b3c610b358490565b600061093c565b15610b4957835460581b92505b6001600160581b031983166000908152600185016020526040902054600160201b90046001600160a01b0316610b9257604051631a0a9b9f60e21b815260040160405180910390fd5b610ba083600160f81b61093c565b15610c3a576000610bb18460581c90565b9050806001600160a01b031663f551e2ee33610bcc8c6132d8565b86866040518563ffffffff1660e01b8152600401610bed949392919061690d565b602060405180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190616a3a565b95505050505050610ca3565b6000610c468460081b90565b6001600160e01b03198116600090815260038701602052604090205490915060f01b600160f11b811615610c8d57604051635b71057960e01b815260040160405180910390fd5b610c9a82338c878761332e565b96505050505050505b9392505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cf5576040516348f5c3ed60e01b815260040160405180910390fd5b6000610cff61320e565b90506000806000610d13886020013561342c565b91945092509050610d2582600061093c565b15610d315750825460581b5b610d3d83828a8a61345a565b6001600160581b031982166000908152600186016020908152604080832081518083019092525463ffffffff81168252600160201b90046001600160a01b031691810191909152919650610d92908490613656565b8015610db057508454815163ffffffff600160c81b90920482169116105b15610dce57604051633ab3447f60e11b815260040160405180910390fd5b60208101516001600160a01b038116610dfa57604051631a0a9b9f60e21b815260040160405180910390fd5b600089815260208190526040902080546001600160a01b0319166001600160a01b03831690811790915560001901610ec257610e37846000613656565b8015610e9f57506001600160581b031983166000908152600287016020526040812090610e6760608d018d616a57565b610e76916004916000916169d8565b610e7f91616a02565b6001600160e01b031916815260208101919091526040016000205460ff16155b15610ebd57604051631a0a9b9f60e21b815260040160405180910390fd5b610fa8565b610ecd846000613656565b8015610f3557506001600160581b031983166000908152600287016020526040812090610efd60608d018d616a57565b610f0c916008916004916169d8565b610f1591616a02565b6001600160e01b031916815260208101919091526040016000205460ff16155b15610f5357604051631a0a9b9f60e21b815260040160405180910390fd5b638dd7712f60e01b610f6860608c018c616a57565b610f77916004916000916169d8565b610f8091616a02565b6001600160e01b03191614610fa85760405163dbbb044b60e01b815260040160405180910390fd5b8715610fb857343434348b335af1505b5050505050509392505050565b6000610fdf610fd261320e565b546001600160a81b031690565b9050336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061101a5750333014155b1561118f5760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f6025906110c190339034908690369060040161690d565b6000604051808303816000875af11580156110e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111089190810190616966565b905061111383613669565b604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da9061113f90849060040161663d565b600060405180830381600087803b15801561115957600080fd5b505af115801561116d573d6000803e3d6000fd5b50505050505050565b6040516348f5c3ed60e01b815260040160405180910390fd5b61119882613669565b5050565b60006111a9610fd261320e565b9050336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906111e45750333014155b156113595760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112519190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f60259061128b90339034908690369060040161690d565b6000604051808303816000875af11580156112aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112d29190810190616966565b9050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55826001600160a01b03167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da9061113f90849060040161663d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8290556040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b60006113bf61320e565b805490915060581b6001600160581b031916156114195760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b6001600160581b0319891661144157604051631a0a9b9f60e21b815260040160405180910390fd5b8861145081600160f81b613656565b8015611465575061146581600160f91b613656565b15611483576040516361c4e91b60e11b815260040160405180910390fd5b61148c8a61374b565b60408051808201909152600181526001600160a01b038a166020820152825463ffffffff60a81b1916600160a81b1783556114cb8b828b8b8b8b6137ad565b60005b8481101561157b576000308787848181106114eb576114eb616abf565b90506020028101906114fd9190616a57565b60405161150b929190616ad5565b6000604051808303816000865af19150503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b505090508061157257604051636534eae560e11b815260048101839052602401611410565b506001016114ce565b505050505050505050505050565b6000611596610fd261320e565b9050336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906115d15750333014155b1561181d5760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa15801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e9190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f60259061167890339034908690369060040161690d565b6000604051808303816000875af1158015611697573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bf9190810190616966565b905060006116cb61320e565b90506001600160581b031989166116f557604051631a0a9b9f60e21b815260040160405180910390fd5b8861170481600160f81b613656565b8015611719575061171981600160f91b613656565b15611737576040516361c4e91b60e11b815260040160405180910390fd5b6117408a61374b565b600061174a61320e565b6001600160581b03198c1660009081526001919091016020526040902054600160201b90046001600160a01b0316036117b757604080518082019091528254600160a81b900463ffffffff1681526001600160a01b038a1660208201526117b58b828b8b8b8b6137ad565b505b5050604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da906117e590849060040161663d565b600060405180830381600087803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050505061116d565b600061182761320e565b90506001600160581b0319881661185157604051631a0a9b9f60e21b815260040160405180910390fd5b8761186081600160f81b613656565b8015611875575061187581600160f91b613656565b15611893576040516361c4e91b60e11b815260040160405180910390fd5b61189c8961374b565b60006118a661320e565b6001600160581b03198b1660009081526001919091016020526040902054600160201b90046001600160a01b03160361191357604080518082019091528254600160a81b900463ffffffff1681526001600160a01b03891660208201526119118a828a8a8a8a6137ad565b505b505050505050505050565b60408051606081018252600080825260208201819052918101919091526119448261087d565b6040805160608101825282546001600160a01b0390811682526001909301549283166020820152600160a01b90920460f81b6001600160f81b0319169082015292915050565b600061199461320e565b6001600160581b031984166000908152600291909101602090815260408083206001600160e01b03198616845290915290205460ff16905092915050565b6040805160208101909152600081526119ea82613232565b604080516020810190915290546001600160a01b0316815292915050565b600f60f81b6060806000808083611a54604080518082018252600681526512d95c9b995b60d21b60208083019190915282518084019093526005835264302e332e3160d81b9083015291565b97989097965046955030945091925090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611aaf576040516348f5c3ed60e01b815260040160405180910390fd5b6000818152602081905260409020546060906001600160a01b031660018114611afa57611af78134611ae46060880188616a57565b611af29160049082906169d8565b6108b7565b91505b600080611b2130611b0e6060890189616a57565b611b1c9160049082906169d8565b6109a3565b9150915081611b435760405163f21e646b60e01b815260040160405180910390fd5b6001600160a01b038316600114610a2c57610a2c83856109d2565b6000611b6861320e565b54600160c81b900463ffffffff16919050565b6000611b88610fd261320e565b9050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590611bc35750333014155b15611d265760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c309190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f602590611c6a90339034908690369060040161690d565b6000604051808303816000875af1158015611c89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cb19190810190616966565b9050611cc2898989898989896139fc565b604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da90611cee90849060040161663d565b600060405180830381600087803b158015611d0857600080fd5b505af1158015611d1c573d6000803e3d6000fd5b5050505050611d35565b611d35888888888888886139fc565b5050505050505050565b6000611d4c610fd261320e565b9050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590611d875750333014155b156122265760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df49190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f602590611e2e90339034908690369060040161690d565b6000604051808303816000875af1158015611e4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e759190810190616966565b905060018603611fb2576000611e8961320e565b90506000611e9d8760581b600160f81b1790565b82546001600160581b03198216600090815260018501602052604090205491925063ffffffff600160a81b9091048116911603611efd578154600163ffffffff600160a81b808404821692909201160263ffffffff60a81b199091161782555b604080518082019091528254600160a81b900463ffffffff16815260009060208101611f2c6014848a8c6169d8565b611f3591616ae5565b60601c9052905060148781013588016034818101929182013591818b01358b0180830192908201359160548d01358d01918201910135611f798888888888886137ad565b6004819003611fa457611fa488611f946004600085876169d8565b611f9d91616a02565b6001613aa0565b5050505050505050506121c2565b6002860361201957601484810135850160348181019291820135918188013588019182019181013590600090611fea90828a8c6169d8565b611ff391616ae5565b60601c90506120048a868684613b33565b61200f818484613b99565b50505050506121c2565b600386036120a9576018848101358501603881810192918201359181880135880191820191013561207c612051600460008a8c6169d8565b61205a91616a02565b8a612069601860048c8e6169d8565b61207291616ae5565b60601c8787613d6a565b6120a061208d601860048a8c6169d8565b61209691616ae5565b60601c8383613b99565b505050506121c2565b6004860361213d576040516306d61fe760e41b81526001600160a01b03861690636d61fe70906120df9087908790600401616b25565b600060405180830381600087803b1580156120f957600080fd5b505af115801561210d573d6000803e3d6000fd5b50505050600080516020616f658339815191528686604051612130929190616b39565b60405180910390a16121c2565b60058603612173576040516306d61fe760e41b81526001600160a01b03861690636d61fe70906120df9087908790600401616b25565b600686036121a9576040516306d61fe760e41b81526001600160a01b03861690636d61fe70906120df9087908790600401616b25565b604051631092ef5760e11b815260040160405180910390fd5b604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da906121ee90849060040161663d565b600060405180830381600087803b15801561220857600080fd5b505af115801561221c573d6000803e3d6000fd5b5050505050612518565b6001850361235157600061223861320e565b9050600061224c8660581b600160f81b1790565b82546001600160581b03198216600090815260018501602052604090205491925063ffffffff600160a81b90910481169116036122ac578154600163ffffffff600160a81b808404821692909201160263ffffffff60a81b199091161782555b604080518082019091528254600160a81b900463ffffffff168152600090602081016122db601484898b6169d8565b6122e491616ae5565b60601c9052905060148681013587016034818101929182013591818a01358a0180830192908201359160548c01358c019182019101356123288888888888886137ad565b60048190036123435761234388611f946004600085876169d8565b505050505050505050612518565b600285036123ae576014838101358401603481810192918201359181870135870191820191810135906000906123899082898b6169d8565b61239291616ae5565b60601c90506123a389868684613b33565b61221c818484613b99565b6003850361241857601883810135840160388181019291820135918187013587019182019101356123fe6123e660046000898b6169d8565b6123ef91616a02565b89612069601860048b8d6169d8565b61240f61208d60186004898b6169d8565b50505050612518565b600485036124ac576040516306d61fe760e41b81526001600160a01b03851690636d61fe709061244e9086908690600401616b25565b600060405180830381600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b50505050600080516020616f65833981519152858560405161249f929190616b39565b60405180910390a1612518565b600585036124e2576040516306d61fe760e41b81526001600160a01b03851690636d61fe709061244e9086908690600401616b25565b600685036121a9576040516306d61fe760e41b81526001600160a01b03851690636d61fe709061244e9086908690600401616b25565b5050505050565b600061252c610fd261320e565b9050336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906125675750333014155b156128ed5760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f60259061260e90339034908690369060040161690d565b6000604051808303816000875af115801561262d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126559190810190616966565b9050856001036126855760006126718660581b600160f81b1790565b905061267e818686613edb565b50506121c2565b8560020361269e5761269885858561401f565b506121c2565b856003036126d65760006126b560048286886169d8565b6126be91616a02565b905061267e816126d1866004818a6169d8565b6140bb565b856004036127f35760006126e861320e565b5460581b90506001600160a01b03861661270061320e565b6001600160581b0319831660009081526001919091016020526040902054600160201b90046001600160a01b03160361278557600161273d61320e565b6001600160581b0319831660009081526001919091016020526040902080546001600160a01b0392909216600160201b02640100000000600160c01b03199092169190911790555b6127c58686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b50600080516020616f8583398151915287876040516127e5929190616b39565b60405180910390a1506121c2565b856005036128db57600061280561320e565b5460581b9050600061281a60208287896169d8565b61282391616b50565b9050612834825b600160f91b61093c565b1561286c576128438260081b90565b6001600160e01b031916810361286c576040516313002bdd60e31b815260040160405180910390fd5b6128ac8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b50600080516020616f8583398151915288886040516128cc929190616b39565b60405180910390a150506121c2565b856006036121a957600061280561320e565b8460010361291b5760006129078560581b600160f81b1790565b9050612914818585613edb565b5050612518565b846002036129345761292e84848461401f565b50612518565b8460030361296757600061294b60048285876169d8565b61295491616a02565b9050612914816126d185600481896169d8565b84600403612a8457600061297961320e565b5460581b90506001600160a01b03851661299161320e565b6001600160581b0319831660009081526001919091016020526040902054600160201b90046001600160a01b031603612a165760016129ce61320e565b6001600160581b0319831660009081526001919091016020526040902080546001600160a01b0392909216600160201b02640100000000600160c01b03199092169190911790555b612a568585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b50600080516020616f858339815191528686604051612a76929190616b39565b60405180910390a150612518565b84600503612b66576000612a9661320e565b5460581b90506000612aab60208286886169d8565b612ab491616b50565b9050612abf8261282a565b15612af757612ace8260081b90565b6001600160e01b0319168103612af7576040516313002bdd60e31b815260040160405180910390fd5b612b378686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b50600080516020616f858339815191528787604051612b57929190616b39565b60405180910390a15050612518565b846006036121a9576000612a9661320e565b6000612b8261320e565b54600160a81b900463ffffffff16919050565b6040805180820190915260008082526020820152612bb161320e565b6001600160581b03199290921660009081526001909201602090815260409283902083518085019094525463ffffffff81168452600160201b90046001600160a01b0316908301525090565b60408051606080820183526000808352602083015291810191909152612c2161320e565b6001600160e01b03198316600090815260039190910160209081526040918290208251606081018452815460f081901b6001600160f01b03191682526201000090046001600160a01b03168184015260018201805485518186028101860187528181529295939493860193830182828015612cc957602002820191906000526020600020905b815460501b6001600160501b0319168152600190910190602001808311612ca7575b5050505050815250509050919050565b600081600881901b603082901b605083901b612cf984600160f81b613656565b8015612d0b5750612d0b846000613656565b8015612d245750612d24846001600160f81b0319613656565b8015612d395750612d3984607f60f91b613656565b15612d4a5750600095945050505050565b6001600160f81b03198316600160f81b14801590612d7157506001600160f81b0319831615155b15612d825750600095945050505050565b6001600160e01b0319821615612d9e5750600095945050505050565b6001600160501b0319811615612dba5750600095945050505050565b50600195945050505050565b60606000612dd333613232565b546001600160a01b0316905080612dfd5760405163710c949760e01b815260040160405180910390fd5b60606001600160a01b038216600114612e2057612e1d82346000366108b7565b90505b612e2b868686614248565b92506001600160a01b038216600114612e4857612e4882826109d2565b50509392505050565b6000612e5e610fd261320e565b9050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590612e995750333014155b156130085760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa158015612ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f069190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f602590612f4090339034908690369060040161690d565b6000604051808303816000875af1158015612f5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f879190810190616966565b90506000612f96888888613edb565b9050612fa3818686614590565b50604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da90612fd090849060040161663d565b600060405180830381600087803b158015612fea57600080fd5b505af1158015612ffe573d6000803e3d6000fd5b5050505050610a2c565b6000613015878787613edb565b905061116d818585614590565b600061302f610fd261320e565b9050336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061306a5750333014155b156131ca5760405163ecd0596160e01b81526004808201526001600160a01b0382169063ecd0596190602401602060405180830381865afa1580156130b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d79190616a9d565b156111765760405163d68f602560e01b81526000906001600160a01b0383169063d68f60259061311190339034908690369060040161690d565b6000604051808303816000875af1158015613130573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131589190810190616966565b9050613165858585614248565b50604051630b9dfbed60e11b81526001600160a01b0383169063173bf7da9061319290849060040161663d565b600060405180830381600087803b1580156131ac57600080fd5b505af11580156131c0573d6000803e3d6000fd5b50505050506131d5565b612518848484614248565b50505050565b60006131e561320e565b5460581b919050565b6000600782101561320157506001919050565b506000919050565b919050565b7f7bcaa2ced2a71450ed5a9a1b4848e8e5206dbc3f06011e595f7f55428cc6f84f90565b6001600160a01b031660009081527f1bbee3173dbdc223633258c9f337a0fff8115f206d302bea0ed3eac003b68b866020526040902090565b813536600060f883901c801561329057600181146132a557600281146132b657600080fd5b600093506001860192506001850391506132d0565b6015860192506015850391506132d0565b6001600160d81b0319841693506005860192506005850391505b509250925092565b604080517f1547321c374afde8a591d972a084b071c594c275e36724931ff96c25f2999c83602082015290810182905260009061094d906060015b60405160208183030381529060405280519060200120614659565b60008060003660006133438a8a8a8a8a614771565b93509350935093506000806133578561487d565b50915091508165ffffffffffff1642108061337957508065ffffffffffff1642115b1561339557506001600160e01b03199550610933945050505050565b6001600160a01b03861663392dffaf6001600160e01b03198e168d6133b98e6132d8565b88886040518663ffffffff1660e01b81526004016133db959493929190616b6e565b602060405180830381865afa1580156133f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341c9190616a3a565b9c9b505050505050505050505050565b80600881901b8060ff60f084901c166001198101613452576001600160d81b0319821691505b509193909250565b60008061346561320e565b9050600061347285616bf8565b9050366000613485610100880188616a57565b909250905061349889600160f81b61093c565b156134f6576134b4886134af6101008a018a616a57565b6148b0565b604080516020601f8401819004810282018101909252828152939850919450925083908390819084018382808284376000920191909152505050506101008401525b8761350581600160f81b61093c565b156135945761358d866135188b60581c90565b6001600160a01b03166397003203878b6040518363ffffffff1660e01b8152600401613545929190616d9b565b6020604051808303816000875af1158015613564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135889190616dbd565b6148dd565b9550613649565b60006135a08a60081b90565b6001600160e01b03198116600090815260038801602052604090205490915060f01b600160f01b16156135e6576040516314b9743f60e01b815260040160405180910390fd5b6000806135f58388888861499b565b9150915061360389836148dd565b985061364389826001600160a01b0316630ccab7a1866001600160e01b0319168b8f6040518463ffffffff1660e01b815260040161354593929190616dd6565b98505050505b5050505050949350505050565b6001600160f81b03199081169116141590565b600061367361320e565b805490915063ffffffff8084169161369591600a91600160a81b900416616dff565b63ffffffff1610156136ba5760405163e60fd64760e01b815260040160405180910390fd5b805463ffffffff600160c81b9091048116908316116136ec57604051633ab3447f60e11b815260040160405180910390fd5b805463ffffffff60c81b1916600160c81b63ffffffff8481168202929092178084559081048216600160a81b909104909116101561119857805463ffffffff60a81b198116600160c81b90910463ffffffff16600160a81b0217905550565b600061375561320e565b80546001600160a81b031916605884901c1781556040516001600160581b0319841681529091507f6789ec0c85d6458d897a36a70129b101f8b4d84c6e218046c3107373dbcbae889060200160405180910390a15050565b60006137b761320e565b80546001600160581b03198916600090815260018301602052604090205491925063ffffffff600160a81b9091048116911603613817578054600163ffffffff600160a81b808404821692909201160263ffffffff60a81b199091161781555b60208601516001600160a01b031661383157600160208701525b85518154600160a81b900463ffffffff9081169116141580613879575085516001600160581b03198816600090815260018301602052604090205463ffffffff918216911610155b1561389757604051633ab3447f60e11b815260040160405180910390fd5b6001600160581b03198716600090815260018083016020908152604090922088518154938a01516001600160a01b0316600160201b81026001600160c01b031990951663ffffffff90921691909117939093179055146139005761390086602001518484613b99565b8661390f81600160f81b61093c565b156139b15760006139208960581c90565b6040516306d61fe760e41b81529091506001600160a01b03821690636d61fe7090613951908a908a90600401616b25565b600060405180830381600087803b15801561396b57600080fd5b505af115801561397f573d6000803e3d6000fd5b50505050600080516020616f658339815191526001826040516139a3929190616b39565b60405180910390a150611d35565b6139bf81600160f91b61093c565b156139e35760006139d08960081b90565b90506139dd818888614c7b565b50611d35565b6040516361c4e91b60e11b815260040160405180910390fd5b60005b86811015611d3557613a98888883818110613a1c57613a1c616abf565b9050602002016020810190613a319190616650565b878381518110613a4357613a43616abf565b6020026020010151878785818110613a5d57613a5d616abf565b9050602002810190613a6f9190616a57565b878787818110613a8157613a81616abf565b9050602002810190613a939190616a57565b6137ad565b6001016139ff565b6000613aaa61320e565b6001600160581b03198516600081815260028301602090815260408083206001600160e01b0319891680855290835292819020805488151560ff1990911681179091558151938452918301939093528183015290519192507f9d17cd6d095ac90a655405ab29f30a7ee7e88ef3974c1bf7544bf591043bb71a919081900360600190a150505050565b613b3d84826150d4565b6040516306d61fe760e41b81526001600160a01b03851690636d61fe7090613b6b9086908690600401616b25565b600060405180830381600087803b158015613b8557600080fd5b505af1158015611d35573d6000803e3d6000fd5b6001600160a01b0383161580613bb857506001600160a01b0383166001145b15613bc257505050565b60405163d60b347f60e01b81523060048201526001600160a01b0384169063d60b347f90602401602060405180830381865afa158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a9190616a9d565b613c9e576001600160a01b038316636d61fe70613c4a83600181876169d8565b6040518363ffffffff1660e01b8152600401613c67929190616b25565b600060405180830381600087803b158015613c8157600080fd5b505af1158015613c95573d6000803e3d6000fd5b50505050613d3d565b6001600160f81b03198282600081613cb857613cb8616abf565b9050013560f81c60f81b6001600160f81b03191603613d3d576001600160a01b038316636d61fe70613ced83600181876169d8565b6040518363ffffffff1660e01b8152600401613d0a929190616b25565b600060405180830381600087803b158015613d2457600080fd5b505af1158015613d38573d6000803e3d6000fd5b505050505b600080516020616f65833981519152600484604051613d5d929190616b39565b60405180910390a1505050565b6001600160a01b038316613d83576001600160a01b0392505b6000613d8e8661087d565b9050600083836000818110613da557613da5616abf565b9050013560f81c60f81b9050613dbf81600060f81b61093c565b15613e5c576001600160a01b038616636d61fe70613de085600181896169d8565b6040518363ffffffff1660e01b8152600401613dfd929190616b25565b600060405180830381600087803b158015613e1757600080fd5b505af1158015613e2b573d6000803e3d6000fd5b50505050600080516020616f65833981519152600387604051613e4f929190616b39565b60405180910390a1613e8c565b613e6e816001600160f81b0319613656565b15613e8c57604051632d6a6bb760e01b815260040160405180910390fd5b81546001600160a01b039586166001600160a01b03199091161782556001909101805460f89290921c600160a01b026001600160a81b0319909216959094169490941793909317909155505050565b600080613ee661320e565b805490915060581b6001600160581b031990811690861603613f1b576040516313002bdd60e31b815260040160405180910390fd5b6001600160581b03198516600090815260018201602052604090208054640100000000600160c01b03198116909155600160201b90046001600160a01b0316915084613f6b81600160f81b61093c565b15613fed576000613f7c8760581c90565b9050613fbe8187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b50600080516020616f85833981519152600182604051613fdf929190616b39565b60405180910390a150612e48565b613ffb81600160f91b61093c565b156139e357600061400c8760081b90565b905061401981878761512e565b50612e48565b60008061402b85613232565b80546001600160a01b031981168255604080516020601f88018190048102820181019092528681526001600160a01b03909216945091925061408a9187919087908790819084018382808284376000920191909152506141a192505050565b50600080516020616f858339815191526002866040516140ab929190616b39565b60405180910390a1509392505050565b6000806140c78561087d565b80546001600160a01b03198116825560018201546001600160a01b03909116935090915061410090600160a01b900460f81b600061093c565b15614189576001810154604080516020601f8701819004810282018101909252858152614151926001600160a01b03169187908790819084018382808284376000920191909152506141a192505050565b506001810154604051600080516020616f8583398151915291614180916003916001600160a01b031690616b39565b60405180910390a15b60010180546001600160a81b03191690559392505050565b60006141fb835a600080638a91b0e360e01b876040516024016141c4919061663d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526152f8565b50604080516001600160a01b038616815282151560208201529192507f2b82f87bf66300af618a9621d3f221edfab735f5bacb4e004cce1b62375396c3910160405180910390a192915050565b606083600881901b61425e82600160f81b61093c565b156142e8578435850160208101903561427883600061093c565b1561428e576142878282615382565b94506142e1565b61429c83600160f81b61093c565b156142ab576142878282615452565b60405162461bcd60e51b815260206004820152600b60248201526a155b9cdd5c1c1bdc9d195960aa1b6044820152606401611410565b5050612e48565b6142f382600061093c565b1561442157600080366000614308898961557f565b6040805160018082528183019092529498509296509094509250816020015b6060815260200190600190039081614327579050509650600061434a868261093c565b1561437e5761435b858585856155d0565b8860008151811061436e5761436e616abf565b6020026020010181905250614417565b61438c86600160f81b61093c565b156142ab5761439d85858585615606565b896000815181106143b0576143b0616abf565b6020908102919091010152905080614417577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb76000896000815181106143f8576143f8616abf565b602002602001015160405161440e929190616e29565b60405180910390a15b5050505050612e48565b614433826001600160f81b031961093c565b156142ab5760408051600180825281830190925290816020015b606081526020019060019003908161444d579050509250600061447360148287896169d8565b61447c91616ae5565b60601c9050366000614491876014818b6169d8565b9150915060006144a28484846109a3565b886000815181106144b5576144b5616abf565b602090810291909101015290506144d085600160f81b61093c565b15614534578061452f577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008860008151811061451057614510616abf565b6020026020010151604051614526929190616e29565b60405180910390a15b614587565b61453f85600061093c565b156142ab578061452f5760405162461bcd60e51b815260206004820152601360248201527211195b1959d85d1958d85b1b0819985a5b1959606a1b6044820152606401611410565b50505050612e48565b6001600160a01b03831615806145af57506001600160a01b0383166001145b156145b957505050565b6001600160f81b031982826000816145d3576145d3616abf565b9050013560f81c60f81b6001600160f81b0319160361463957614637836145fd83600181876169d8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141a192505050565b505b600080516020616f85833981519152600484604051613d5d929190616b39565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f000000000000000000000000000000000000000000000000000000000000000046141661474c5750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a090205b67190100000000000060005280601a5281603a52604260182090506000603a52919050565b6000803660008061478061320e565b60408051610120810182526000808252602082018190529181018290526080810182905260a0810191909152606060c082018190526001600160e01b03198d16908201526001600160a01b038b1660e082015261010081018a90529091506147ea81838a8a615637565b878760008181106147fd576147fd616abf565b9091013560f81c60ff1490506148265760405163b32eeb6960e01b815260040160405180910390fd5b614833876001818b6169d8565b60608301516001600160e01b0319166000908152600394909401602052604093849020549390920151620100009093046001600160a01b03169c929b509950975095505050505050565b600060a082901c65ffffffffffff1682811560001981016148a25765ffffffffffff92505b508360d01c92509193909250565b60003660006148c08686866158a4565b925050506094830135830160348101906014013593509350939050565b600081830160601b8260601b81148460601b8214176001600160a01b03848618161517600181146149115760019250614993565b6001600160d01b031980851690861681811881831102188686176001600160a01b031617935065ffffffffffff60a01b861690816149565765ffffffffffff60a01b91505b5065ffffffffffff60a01b851680614974575065ffffffffffff60a01b5b80821890821102188061498d575065ffffffffffff60a01b5b92909217915b505092915050565b60008060006149a861320e565b6001600160e01b03198816600090815260038201602052604081209192506001909101905b8154811015614bbf57600080614a068484815481106149ee576149ee616abf565b60009182526020909120015460501b90605082901c90565b91509150600089896000818110614a1f57614a1f616abf565b919091013560f81c915050838103614ab2576000614a41600960018c8e6169d8565b614a4a91616e42565b60c01c9050614a5f6009808301908c8e6169d8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101008d0152614aa88a60098301818e6169d8565b9a509a5050614aec565b838160ff161015614ad657604051630760bdcf60e11b815260040160405180910390fd5b6040805160208101909152600081526101008c01525b600160f01b8316600003614bb4576000826001600160a01b0316637129edce8e6001600160e01b0319168e6040518363ffffffff1660e01b8152600401614b34929190616e78565b6020604051808303816000875af1158015614b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b779190616dbd565b9050806001600160a01b03811615614ba557604051631f24c1fb60e11b815260048101879052602401611410565b614baf8a836148dd565b995050505b5050506001016149cd565b5085856000818110614bd357614bd3616abf565b9091013560f81c60ff149050614bfc5760405163b32eeb6960e01b815260040160405180910390fd5b614c0985600181896169d8565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506101008c01949094525050506001600160e01b03198916815260039092016020525060409020546001600160a01b036201000090910416905094509492505050565b6000614c8561320e565b90508235830160208101903560fe811180614c9e575080155b15614cbc5760405163b62d956d60e01b815260040160405180910390fd5b6001600160e01b03198616600090815260038401602052604090206001015415614d0a576001600160e01b0319861660009081526003840160205260408120614d0a91600190910190615e77565b60005b6000198201811015614efe576001600160e01b0319871660009081526003850160205260409020600101838383818110614d4957614d49616abf565b9050602002810190614d5b9190616a57565b614d6a916016916000916169d8565b614d7391616e91565b81546001810183556000928352602090922090910180546001600160b01b03191660509290921c919091179055828282818110614db257614db2616abf565b9050602002810190614dc49190616a57565b614dd3916016916002916169d8565b614ddc91616ae5565b60601c636d61fe706001600160e01b03198916858585818110614e0157614e01616abf565b9050602002810190614e139190616a57565b614e219160169082906169d8565b604051602001614e3393929190616ec7565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401614e5e919061663d565b600060405180830381600087803b158015614e7857600080fd5b505af1158015614e8c573d6000803e3d6000fd5b50505050600080516020616f658339815191526005848484818110614eb357614eb3616abf565b9050602002810190614ec59190616a57565b614ed4916016916002916169d8565b614edd91616ae5565b60601c604051614eee929190616b39565b60405180910390a1600101614d0d565b50600082826000198101818110614f1757614f17616abf565b9050602002810190614f299190616a57565b614f38916016916002916169d8565b614f4191616ae5565b6001600160e01b031988166000908152600386016020526040902080546201000060609390931c92830262010000600160b01b0319909116179055905082826000198101818110614f9457614f94616abf565b9050602002810190614fa69190616a57565b614fb5916002916000916169d8565b614fbe91616ee1565b6001600160e01b0319881660008181526003870160205260409020805461ffff191660f09390931c929092179091556001600160a01b03821690636d61fe70908585600019810181811061501457615014616abf565b90506020028101906150269190616a57565b6150349160169082906169d8565b60405160200161504693929190616ec7565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401615071919061663d565b600060405180830381600087803b15801561508b57600080fd5b505af115801561509f573d6000803e3d6000fd5b50505050600080516020616f658339815191526006826040516150c3929190616b39565b60405180910390a150505050505050565b6001600160a01b0381166150e6575060015b60006150f183613232565b80546001600160a01b0319166001600160a01b038416178155604051909150600080516020616f6583398151915290613d5d906002908690616b39565b81358201602081019035600061514261320e565b6001600160e01b031987166000908152600391909101602052604090206001808201549192500182146151885760405163013dcc8d60e31b815260040160405180910390fd5b6001810160005b815481101561523d5760006151af8383815481106149ee576149ee616abf565b91505061520b818a6001600160e01b0319168888868181106151d3576151d3616abf565b90506020028101906151e59190616a57565b6040516020016151f793929190616ec7565b6040516020818303038152906040526141a1565b50600080516020616f8583398151915260058260405161522c929190616b39565b60405180910390a15060010161518f565b5061524661320e565b6001600160e01b0319881660009081526003919091016020526040812061527291600190910190615e77565b81546152a8906201000090046001600160a01b03166001600160e01b03198916868660001981018181106151d3576151d3616abf565b508154604051600080516020616f85833981519152916152da916006916201000090046001600160a01b031690616b39565b60405180910390a15080546001600160b01b03191690555050505050565b6000606060008060008661ffff166001600160401b0381111561531d5761531d616431565b6040519080825280601f01601f191660200182016040528015615347576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115615368578692505b828152826000602083013e90999098509650505050505050565b606081806001600160401b0381111561539d5761539d616431565b6040519080825280602002602001820160405280156153d057816020015b60608152602001906001900390816153bb5790505b50915060005b8181101561499357368585838181106153f1576153f1616abf565b90506020028101906154039190616f17565b905061542c61541560208301836160c6565b60208301356154276040850185616a57565b6155d0565b84838151811061543e5761543e616abf565b6020908102919091010152506001016153d6565b606081806001600160401b0381111561546d5761546d616431565b6040519080825280602002602001820160405280156154a057816020015b606081526020019060019003908161548b5790505b50915060005b8181101561499357368585838181106154c1576154c1616abf565b90506020028101906154d39190616f17565b905060006154fe6154e760208401846160c6565b60208401356154f96040860186616a57565b615606565b86858151811061551057615510616abf565b6020908102919091010152905080615575577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb78386858151811061555657615556616abf565b602002602001015160405161556c929190616e29565b60405180910390a15b50506001016154a6565b600080368161559160148287896169d8565b61559a91616ae5565b60601c93506155ad6034601487896169d8565b6155b691616b50565b92506155c585603481896169d8565b949793965094505050565b60405181838237600038838387895af16155ed573d6000823e3d81fd5b3d8152602081013d6000823e3d01604052949350505050565b604051600090828482376000388483888a5af191503d8152602081013d6000823e3d81016040525094509492505050565b60608401516001600160e01b03191660009081526003840160205260408120600101905b8154811015610a2c576156798282815481106149ee576149ee616abf565b6001600160a01b031660a08801526001600160f01b031916608087015283836000816156a7576156a7616abf565b919091013560f81c8088528290039050615744576156c96009600185876169d8565b6156d291616e42565b60c01c602087018190526156ed9060099081019085876169d8565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060c0870152602086015161573b90849060090181876169d8565b935093506157b0565b855160ff1681111561576957604051630760bdcf60e11b815260040160405180910390fd5b61577660008085876169d8565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060c08701525b6080860151600160f11b1660000361589c5760a0860151606087015160e088015161010089015160c08a015160405163184dfdbb60e11b81526000956001600160a01b03169463309bfb7694615817946001600160e01b0319909216939092600401616f37565b602060405180830381865afa158015615834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906158589190616dbd565b9050806001600160a01b0381161561588657604051631f24c1fb60e11b815260048101849052602401611410565b6158948860400151836148dd565b604089015250505b60010161565b565b600036600080366000366000366000806158bf8e8e8e61592a565b9750975097509750975097509750975060748d013560348e0101995060208a033598506158ed818b8b615adf565b9a506158fd8e89898989896137ad565b6159078383615c7f565b6159198e611f946004600086886169d8565b505050505050505050509392505050565b604080518082019091526000808252602082015236600036600036600080600061595261320e565b9050615962601460008c8e6169d8565b61596b91616ae5565b60601c89602001906001600160a01b031690816001600160a01b0316815250508060000160159054906101000a900463ffffffff16896000019063ffffffff16908163ffffffff168152505060148b013560348c010197506020880335965060348b013560348c010195506020860335945060548b013560348c0101935060208403359250615acf7fb17ab1224aca0d4255ef8161acaf2ac121b8faa32a4b2258c912cc5f8308c50560001b8d8360000160159054906101000a900463ffffffff168c602001518c8c604051615a42929190616ad5565b60405180910390208b8b604051615a5a929190616ad5565b60405180910390208a8a604051615a72929190616ad5565b6040805191829003822060208301989098526001600160581b03199096169581019590955263ffffffff90931660608501526001600160a01b03909116608084015260a083015260c082015260e081019190915261010001613313565b9150509397509397509397509397565b600080615aea61320e565b805490915060581b6000615b0282600160f81b61093c565b15615b8e578254604051637aa8f17760e11b81526001600160a81b038216916001600160a01b03169063f551e2ee90615b459030908c908c908c9060040161690d565b602060405180830381865afa158015615b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b869190616a3a565b915050615c44565b615b9c82600160f91b61093c565b156139e357825460601b6000615bb582308b8b8b614771565b60405163392dffaf60e01b8152919b5099509097509091506001600160a01b0382169063392dffaf90615bfe906001600160e01b031986169030908e908e908e90600401616b6e565b602060405180830381865afa158015615c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c3f9190616a3a565b925050505b630b135d3f60e11b6001600160e01b0319821614615c75576040516362467c7760e11b815260040160405180910390fd5b5050509392505050565b6000615c8e60048284866169d8565b615c9791616a02565b905060048210615e7257602c8210615e2b57366000818180615cbd60186004898b6169d8565b615cc691616ae5565b60601c9050602c880135604c890101945060208503359350604c880135604c890101925060208303359150615d1b85856000818110615d0757615d07616abf565b9050013560f81c60f81b600060f81b61093c565b8015615d8b575060405163ecd0596160e01b8152600260048201526001600160a01b0382169063ecd0596190602401602060405180830381865afa158015615d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d8b9190616a9d565b15615de157606c8801358801604c810190602c01356000615daf60148284866169d8565b615db891616ae5565b60601c9050615dc784826150d4565b615ddd81615dd884601481886169d8565b613b99565b5050505b615e078682615df4602c60188c8e6169d8565b615dfd91616ae5565b60601c8888613d6a565b611d35615e18602c60188a8c6169d8565b615e2191616ae5565b60601c8484613b99565b60048214615e725760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642073656c6563746f724461746160601b6044820152606401611410565b505050565b5080546000825590600052602060002090810190615e959190615e98565b50565b5b80821115615ead5760008155600101615e99565b5090565b6001600160a01b0381168114615e9557600080fd5b803561320981615eb1565b60008083601f840112615ee357600080fd5b5081356001600160401b03811115615efa57600080fd5b602083019150836020828501011115615f1257600080fd5b9250929050565b60008060008060608587031215615f2f57600080fd5b843593506020850135615f4181615eb1565b925060408501356001600160401b03811115615f5c57600080fd5b615f6887828801615ed1565b95989497509550505050565b600080600080600060808688031215615f8c57600080fd5b8535615f9781615eb1565b94506020860135615fa781615eb1565b93506040860135925060608601356001600160401b03811115615fc957600080fd5b615fd588828901615ed1565b969995985093965092949392505050565b600080600060408486031215615ffb57600080fd5b8335925060208401356001600160401b0381111561601857600080fd5b61602486828701615ed1565b9497909650939450505050565b6000610120828403121561604457600080fd5b50919050565b60008060006060848603121561605f57600080fd5b83356001600160401b0381111561607557600080fd5b61608186828701616031565b9660208601359650604090950135949350505050565b803563ffffffff8116811461320957600080fd5b6000602082840312156160bd57600080fd5b610ca382616097565b6000602082840312156160d857600080fd5b8135610ca381615eb1565b80356001600160581b03198116811461320957600080fd5b60008083601f84011261610d57600080fd5b5081356001600160401b0381111561612457600080fd5b6020830191508360208260051b8501011115615f1257600080fd5b60008060008060008060008060a0898b03121561615b57600080fd5b616164896160e3565b9750602089013561617481615eb1565b965060408901356001600160401b0381111561618f57600080fd5b61619b8b828c01615ed1565b90975095505060608901356001600160401b038111156161ba57600080fd5b6161c68b828c01615ed1565b90955093505060808901356001600160401b038111156161e557600080fd5b6161f18b828c016160fb565b999c989b5096995094979396929594505050565b6000806000806000806080878903121561621e57600080fd5b616227876160e3565b9550602087013561623781615eb1565b945060408701356001600160401b0381111561625257600080fd5b61625e89828a01615ed1565b90955093505060608701356001600160401b0381111561627d57600080fd5b61628989828a01615ed1565b979a9699509497509295939492505050565b6001600160e01b031981168114615e9557600080fd5b6000602082840312156162c357600080fd5b8135610ca38161629b565b600080604083850312156162e157600080fd5b6162ea836160e3565b915060208301356162fa8161629b565b809150509250929050565b60005b83811015616320578181015183820152602001616308565b50506000910152565b60008151808452616341816020860160208601616305565b601f01601f19169290920160200192915050565b60ff60f81b8816815260e06020820152600061637460e0830189616329565b82810360408401526163868189616329565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b818110156163dc5783518352602093840193909201916001016163be565b50909b9a5050505050505050505050565b6000806040838503121561640057600080fd5b82356001600160401b0381111561641657600080fd5b61642285828601616031565b95602094909401359450505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561646957616469616431565b60405290565b60405161012081016001600160401b038111828210171561646957616469616431565b604051601f8201601f191681016001600160401b03811182821017156164ba576164ba616431565b604052919050565b60008060008060008060006080888a0312156164dd57600080fd5b87356001600160401b038111156164f357600080fd5b6164ff8a828b016160fb565b90985096505060208801356001600160401b0381111561651e57600080fd5b8801601f81018a1361652f57600080fd5b80356001600160401b0381111561654857616548616431565b61655760208260051b01616492565b8082825260208201915060208360061b85010192508c83111561657957600080fd5b6020840193505b828410156165d5576040848e03121561659857600080fd5b6165a0616447565b6165a985616097565b815260208501356165b981615eb1565b8060208301525080835250602082019150604084019350616580565b975050505060408801356001600160401b038111156165f357600080fd5b6165ff8a828b016160fb565b90955093505060608801356001600160401b0381111561661e57600080fd5b61662a8a828b016160fb565b989b979a50959850939692959293505050565b602081526000610ca36020830184616329565b60006020828403121561666257600080fd5b610ca3826160e3565b60008060008060008060008060a0898b03121561668757600080fd5b883561669281615eb1565b975060208901356166a281615eb1565b965060408901356001600160401b038111156166bd57600080fd5b6166c98b828c016160fb565b90975095505060608901356001600160401b038111156166e857600080fd5b6166f48b828c016160fb565b90955093505060808901356001600160401b0381111561671357600080fd5b6161f18b828c01615ed1565b602080825282516001600160f01b03191682820152828101516001600160a01b03166040808401919091528301516060808401528051608084018190526000929190910190829060a08501905b808310156167985783516001600160501b0319168252602093840193600193909301929091019061676c565b5095945050505050565b6000602082840312156167b457600080fd5b5035919050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561681457603f198786030184526167ff858351616329565b945060209384019391909101906001016167e3565b50929695505050505050565b60008060008060006060868803121561683857600080fd5b616841866160e3565b945060208601356001600160401b0381111561685c57600080fd5b61686888828901615ed1565b90955093505060408601356001600160401b03811115615fc957600080fd5b60008060008060008060a087890312156168a057600080fd5b86356168ab81615eb1565b955060208701356168bb81615eb1565b9450604087013593506060870135925060808701356001600160401b0381111561627d57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03851681528360208201526060604082015260006169356060830184866168e4565b9695505050505050565b60006001600160401b0382111561695857616958616431565b50601f01601f191660200190565b60006020828403121561697857600080fd5b81516001600160401b0381111561698e57600080fd5b8201601f8101841361699f57600080fd5b80516169b26169ad8261693f565b616492565b8181528560208385010111156169c757600080fd5b610933826020830160208601616305565b600080858511156169e857600080fd5b838611156169f557600080fd5b5050820193919092039150565b80356001600160e01b03198116906004841015616a33576001600160e01b0319600485900360031b81901b82161691505b5092915050565b600060208284031215616a4c57600080fd5b8151610ca38161629b565b6000808335601e19843603018112616a6e57600080fd5b8301803591506001600160401b03821115616a8857600080fd5b602001915036819003821315615f1257600080fd5b600060208284031215616aaf57600080fd5b81518015158114610ca357600080fd5b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b80356bffffffffffffffffffffffff198116906014841015616a33576bffffffffffffffffffffffff1960149490940360031b84901b1690921692915050565b602081526000610b016020830184866168e4565b9182526001600160a01b0316602082015260400190565b8035602083101561094d57600019602084900360031b1b1692915050565b85815260018060a01b0385166020820152836040820152608060608201526000616b9c6080830184866168e4565b979650505050505050565b600082601f830112616bb857600080fd5b8135616bc66169ad8261693f565b818152846020838601011115616bdb57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101208236031215616c0b57600080fd5b616c1361646f565b616c1c83615ec6565b81526020838101359082015260408301356001600160401b03811115616c4157600080fd5b616c4d36828601616ba7565b60408301525060608301356001600160401b03811115616c6c57600080fd5b616c7836828601616ba7565b6060830152506080838101359082015260a0808401359082015260c0808401359082015260e08301356001600160401b03811115616cb557600080fd5b616cc136828601616ba7565b60e0830152506101008301356001600160401b03811115616ce157600080fd5b616ced36828601616ba7565b6101008301525092915050565b80516001600160a01b0316825260208101516020830152600060408201516101206040850152616d2e610120850182616329565b905060608301518482036060860152616d478282616329565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015184820360e0860152616d7f8282616329565b9150506101008301518482036101008601526109338282616329565b604081526000616dae6040830185616cfa565b90508260208301529392505050565b600060208284031215616dcf57600080fd5b5051919050565b838152606060208201526000616def6060830185616cfa565b9050826040830152949350505050565b63ffffffff818116838216019081111561094d57634e487b7160e01b600052601160045260246000fd5b828152604060208201526000610b016040830184616329565b80356001600160c01b03198116906008841015616a33576001600160c01b031960089490940360031b84901b1690921692915050565b828152604060208201526000610b016040830184616cfa565b80356001600160501b03198116906016841015616a33576001600160501b031960169490940360031b84901b1690921692915050565b838152818360208301376000910160200190815292915050565b80356001600160f01b03198116906002841015616a33576001600160f01b031960029490940360031b84901b1690921692915050565b60008235605e19833603018112616f2d57600080fd5b9190910192915050565b84815260018060a01b0384166020820152826040820152608060608201526000616935608083018461632956fed21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef123341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e",
}

// KernelABI is the input ABI used to generate the binding from.
// Deprecated: Use KernelMetaData.ABI instead.
var KernelABI = KernelMetaData.ABI

// KernelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KernelMetaData.Bin instead.
var KernelBin = KernelMetaData.Bin

// DeployKernel deploys a new Ethereum contract, binding an instance of Kernel to it.
func DeployKernel(auth *bind.TransactOpts, backend bind.ContractBackend, _entrypoint common.Address) (common.Address, *types.Transaction, *Kernel, error) {
	parsed, err := KernelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KernelBin), backend, _entrypoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Kernel{KernelCaller: KernelCaller{contract: contract}, KernelTransactor: KernelTransactor{contract: contract}, KernelFilterer: KernelFilterer{contract: contract}}, nil
}

// Kernel is an auto generated Go binding around an Ethereum contract.
type Kernel struct {
	KernelCaller     // Read-only binding to the contract
	KernelTransactor // Write-only binding to the contract
	KernelFilterer   // Log filterer for contract events
}

// KernelCaller is an auto generated read-only Go binding around an Ethereum contract.
type KernelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KernelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KernelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KernelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KernelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KernelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KernelSession struct {
	Contract     *Kernel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KernelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KernelCallerSession struct {
	Contract *KernelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KernelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KernelTransactorSession struct {
	Contract     *KernelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KernelRaw is an auto generated low-level Go binding around an Ethereum contract.
type KernelRaw struct {
	Contract *Kernel // Generic contract binding to access the raw methods on
}

// KernelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KernelCallerRaw struct {
	Contract *KernelCaller // Generic read-only contract binding to access the raw methods on
}

// KernelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KernelTransactorRaw struct {
	Contract *KernelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKernel creates a new instance of Kernel, bound to a specific deployed contract.
func NewKernel(address common.Address, backend bind.ContractBackend) (*Kernel, error) {
	contract, err := bindKernel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Kernel{KernelCaller: KernelCaller{contract: contract}, KernelTransactor: KernelTransactor{contract: contract}, KernelFilterer: KernelFilterer{contract: contract}}, nil
}

// NewKernelCaller creates a new read-only instance of Kernel, bound to a specific deployed contract.
func NewKernelCaller(address common.Address, caller bind.ContractCaller) (*KernelCaller, error) {
	contract, err := bindKernel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KernelCaller{contract: contract}, nil
}

// NewKernelTransactor creates a new write-only instance of Kernel, bound to a specific deployed contract.
func NewKernelTransactor(address common.Address, transactor bind.ContractTransactor) (*KernelTransactor, error) {
	contract, err := bindKernel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KernelTransactor{contract: contract}, nil
}

// NewKernelFilterer creates a new log filterer instance of Kernel, bound to a specific deployed contract.
func NewKernelFilterer(address common.Address, filterer bind.ContractFilterer) (*KernelFilterer, error) {
	contract, err := bindKernel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KernelFilterer{contract: contract}, nil
}

// bindKernel binds a generic wrapper to an already deployed contract.
func bindKernel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KernelMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kernel *KernelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kernel.Contract.KernelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kernel *KernelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kernel.Contract.KernelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kernel *KernelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kernel.Contract.KernelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kernel *KernelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Kernel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kernel *KernelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kernel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kernel *KernelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kernel.Contract.contract.Transact(opts, method, params...)
}

// AccountId is a free data retrieval call binding the contract method 0x9cfd7cff.
//
// Solidity: function accountId() pure returns(string accountImplementationId)
func (_Kernel *KernelCaller) AccountId(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "accountId")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AccountId is a free data retrieval call binding the contract method 0x9cfd7cff.
//
// Solidity: function accountId() pure returns(string accountImplementationId)
func (_Kernel *KernelSession) AccountId() (string, error) {
	return _Kernel.Contract.AccountId(&_Kernel.CallOpts)
}

// AccountId is a free data retrieval call binding the contract method 0x9cfd7cff.
//
// Solidity: function accountId() pure returns(string accountImplementationId)
func (_Kernel *KernelCallerSession) AccountId() (string, error) {
	return _Kernel.Contract.AccountId(&_Kernel.CallOpts)
}

// CurrentNonce is a free data retrieval call binding the contract method 0xadb610a3.
//
// Solidity: function currentNonce() view returns(uint32)
func (_Kernel *KernelCaller) CurrentNonce(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "currentNonce")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CurrentNonce is a free data retrieval call binding the contract method 0xadb610a3.
//
// Solidity: function currentNonce() view returns(uint32)
func (_Kernel *KernelSession) CurrentNonce() (uint32, error) {
	return _Kernel.Contract.CurrentNonce(&_Kernel.CallOpts)
}

// CurrentNonce is a free data retrieval call binding the contract method 0xadb610a3.
//
// Solidity: function currentNonce() view returns(uint32)
func (_Kernel *KernelCallerSession) CurrentNonce() (uint32, error) {
	return _Kernel.Contract.CurrentNonce(&_Kernel.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Kernel *KernelCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Kernel *KernelSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Kernel.Contract.Eip712Domain(&_Kernel.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Kernel *KernelCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Kernel.Contract.Eip712Domain(&_Kernel.CallOpts)
}

// Entrypoint is a free data retrieval call binding the contract method 0xa65d69d4.
//
// Solidity: function entrypoint() view returns(address)
func (_Kernel *KernelCaller) Entrypoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "entrypoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Entrypoint is a free data retrieval call binding the contract method 0xa65d69d4.
//
// Solidity: function entrypoint() view returns(address)
func (_Kernel *KernelSession) Entrypoint() (common.Address, error) {
	return _Kernel.Contract.Entrypoint(&_Kernel.CallOpts)
}

// Entrypoint is a free data retrieval call binding the contract method 0xa65d69d4.
//
// Solidity: function entrypoint() view returns(address)
func (_Kernel *KernelCallerSession) Entrypoint() (common.Address, error) {
	return _Kernel.Contract.Entrypoint(&_Kernel.CallOpts)
}

// ExecutorConfig is a free data retrieval call binding the contract method 0x721e67f4.
//
// Solidity: function executorConfig(address executor) view returns((address))
func (_Kernel *KernelCaller) ExecutorConfig(opts *bind.CallOpts, executor common.Address) (ExecutorManagerExecutorConfig, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "executorConfig", executor)

	if err != nil {
		return *new(ExecutorManagerExecutorConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ExecutorManagerExecutorConfig)).(*ExecutorManagerExecutorConfig)

	return out0, err

}

// ExecutorConfig is a free data retrieval call binding the contract method 0x721e67f4.
//
// Solidity: function executorConfig(address executor) view returns((address))
func (_Kernel *KernelSession) ExecutorConfig(executor common.Address) (ExecutorManagerExecutorConfig, error) {
	return _Kernel.Contract.ExecutorConfig(&_Kernel.CallOpts, executor)
}

// ExecutorConfig is a free data retrieval call binding the contract method 0x721e67f4.
//
// Solidity: function executorConfig(address executor) view returns((address))
func (_Kernel *KernelCallerSession) ExecutorConfig(executor common.Address) (ExecutorManagerExecutorConfig, error) {
	return _Kernel.Contract.ExecutorConfig(&_Kernel.CallOpts, executor)
}

// IsAllowedSelector is a free data retrieval call binding the contract method 0x6e6fa0c6.
//
// Solidity: function isAllowedSelector(bytes21 vId, bytes4 selector) view returns(bool)
func (_Kernel *KernelCaller) IsAllowedSelector(opts *bind.CallOpts, vId [21]byte, selector [4]byte) (bool, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "isAllowedSelector", vId, selector)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedSelector is a free data retrieval call binding the contract method 0x6e6fa0c6.
//
// Solidity: function isAllowedSelector(bytes21 vId, bytes4 selector) view returns(bool)
func (_Kernel *KernelSession) IsAllowedSelector(vId [21]byte, selector [4]byte) (bool, error) {
	return _Kernel.Contract.IsAllowedSelector(&_Kernel.CallOpts, vId, selector)
}

// IsAllowedSelector is a free data retrieval call binding the contract method 0x6e6fa0c6.
//
// Solidity: function isAllowedSelector(bytes21 vId, bytes4 selector) view returns(bool)
func (_Kernel *KernelCallerSession) IsAllowedSelector(vId [21]byte, selector [4]byte) (bool, error) {
	return _Kernel.Contract.IsAllowedSelector(&_Kernel.CallOpts, vId, selector)
}

// IsModuleInstalled is a free data retrieval call binding the contract method 0x112d3a7d.
//
// Solidity: function isModuleInstalled(uint256 moduleType, address module, bytes additionalContext) view returns(bool)
func (_Kernel *KernelCaller) IsModuleInstalled(opts *bind.CallOpts, moduleType *big.Int, module common.Address, additionalContext []byte) (bool, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "isModuleInstalled", moduleType, module, additionalContext)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsModuleInstalled is a free data retrieval call binding the contract method 0x112d3a7d.
//
// Solidity: function isModuleInstalled(uint256 moduleType, address module, bytes additionalContext) view returns(bool)
func (_Kernel *KernelSession) IsModuleInstalled(moduleType *big.Int, module common.Address, additionalContext []byte) (bool, error) {
	return _Kernel.Contract.IsModuleInstalled(&_Kernel.CallOpts, moduleType, module, additionalContext)
}

// IsModuleInstalled is a free data retrieval call binding the contract method 0x112d3a7d.
//
// Solidity: function isModuleInstalled(uint256 moduleType, address module, bytes additionalContext) view returns(bool)
func (_Kernel *KernelCallerSession) IsModuleInstalled(moduleType *big.Int, module common.Address, additionalContext []byte) (bool, error) {
	return _Kernel.Contract.IsModuleInstalled(&_Kernel.CallOpts, moduleType, module, additionalContext)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 hash, bytes signature) view returns(bytes4)
func (_Kernel *KernelCaller) IsValidSignature(opts *bind.CallOpts, hash [32]byte, signature []byte) ([4]byte, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "isValidSignature", hash, signature)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 hash, bytes signature) view returns(bytes4)
func (_Kernel *KernelSession) IsValidSignature(hash [32]byte, signature []byte) ([4]byte, error) {
	return _Kernel.Contract.IsValidSignature(&_Kernel.CallOpts, hash, signature)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 hash, bytes signature) view returns(bytes4)
func (_Kernel *KernelCallerSession) IsValidSignature(hash [32]byte, signature []byte) ([4]byte, error) {
	return _Kernel.Contract.IsValidSignature(&_Kernel.CallOpts, hash, signature)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_Kernel *KernelCaller) OnERC1155BatchReceived(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_Kernel *KernelSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC1155BatchReceived(&_Kernel.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_Kernel *KernelCallerSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC1155BatchReceived(&_Kernel.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelCaller) OnERC1155Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC1155Received(&_Kernel.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelCallerSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC1155Received(&_Kernel.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC721Received(&_Kernel.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_Kernel *KernelCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _Kernel.Contract.OnERC721Received(&_Kernel.CallOpts, arg0, arg1, arg2, arg3)
}

// PermissionConfig is a free data retrieval call binding the contract method 0xc3e58978.
//
// Solidity: function permissionConfig(bytes4 pId) view returns((bytes2,address,bytes22[]))
func (_Kernel *KernelCaller) PermissionConfig(opts *bind.CallOpts, pId [4]byte) (ValidationManagerPermissionConfig, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "permissionConfig", pId)

	if err != nil {
		return *new(ValidationManagerPermissionConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidationManagerPermissionConfig)).(*ValidationManagerPermissionConfig)

	return out0, err

}

// PermissionConfig is a free data retrieval call binding the contract method 0xc3e58978.
//
// Solidity: function permissionConfig(bytes4 pId) view returns((bytes2,address,bytes22[]))
func (_Kernel *KernelSession) PermissionConfig(pId [4]byte) (ValidationManagerPermissionConfig, error) {
	return _Kernel.Contract.PermissionConfig(&_Kernel.CallOpts, pId)
}

// PermissionConfig is a free data retrieval call binding the contract method 0xc3e58978.
//
// Solidity: function permissionConfig(bytes4 pId) view returns((bytes2,address,bytes22[]))
func (_Kernel *KernelCallerSession) PermissionConfig(pId [4]byte) (ValidationManagerPermissionConfig, error) {
	return _Kernel.Contract.PermissionConfig(&_Kernel.CallOpts, pId)
}

// RootValidator is a free data retrieval call binding the contract method 0xf1f7f0f9.
//
// Solidity: function rootValidator() view returns(bytes21)
func (_Kernel *KernelCaller) RootValidator(opts *bind.CallOpts) ([21]byte, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "rootValidator")

	if err != nil {
		return *new([21]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([21]byte)).(*[21]byte)

	return out0, err

}

// RootValidator is a free data retrieval call binding the contract method 0xf1f7f0f9.
//
// Solidity: function rootValidator() view returns(bytes21)
func (_Kernel *KernelSession) RootValidator() ([21]byte, error) {
	return _Kernel.Contract.RootValidator(&_Kernel.CallOpts)
}

// RootValidator is a free data retrieval call binding the contract method 0xf1f7f0f9.
//
// Solidity: function rootValidator() view returns(bytes21)
func (_Kernel *KernelCallerSession) RootValidator() ([21]byte, error) {
	return _Kernel.Contract.RootValidator(&_Kernel.CallOpts)
}

// SelectorConfig is a free data retrieval call binding the contract method 0x57b3a5f4.
//
// Solidity: function selectorConfig(bytes4 selector) view returns((address,address,bytes1))
func (_Kernel *KernelCaller) SelectorConfig(opts *bind.CallOpts, selector [4]byte) (SelectorManagerSelectorConfig, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "selectorConfig", selector)

	if err != nil {
		return *new(SelectorManagerSelectorConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(SelectorManagerSelectorConfig)).(*SelectorManagerSelectorConfig)

	return out0, err

}

// SelectorConfig is a free data retrieval call binding the contract method 0x57b3a5f4.
//
// Solidity: function selectorConfig(bytes4 selector) view returns((address,address,bytes1))
func (_Kernel *KernelSession) SelectorConfig(selector [4]byte) (SelectorManagerSelectorConfig, error) {
	return _Kernel.Contract.SelectorConfig(&_Kernel.CallOpts, selector)
}

// SelectorConfig is a free data retrieval call binding the contract method 0x57b3a5f4.
//
// Solidity: function selectorConfig(bytes4 selector) view returns((address,address,bytes1))
func (_Kernel *KernelCallerSession) SelectorConfig(selector [4]byte) (SelectorManagerSelectorConfig, error) {
	return _Kernel.Contract.SelectorConfig(&_Kernel.CallOpts, selector)
}

// SupportsExecutionMode is a free data retrieval call binding the contract method 0xd03c7914.
//
// Solidity: function supportsExecutionMode(bytes32 mode) pure returns(bool)
func (_Kernel *KernelCaller) SupportsExecutionMode(opts *bind.CallOpts, mode [32]byte) (bool, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "supportsExecutionMode", mode)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsExecutionMode is a free data retrieval call binding the contract method 0xd03c7914.
//
// Solidity: function supportsExecutionMode(bytes32 mode) pure returns(bool)
func (_Kernel *KernelSession) SupportsExecutionMode(mode [32]byte) (bool, error) {
	return _Kernel.Contract.SupportsExecutionMode(&_Kernel.CallOpts, mode)
}

// SupportsExecutionMode is a free data retrieval call binding the contract method 0xd03c7914.
//
// Solidity: function supportsExecutionMode(bytes32 mode) pure returns(bool)
func (_Kernel *KernelCallerSession) SupportsExecutionMode(mode [32]byte) (bool, error) {
	return _Kernel.Contract.SupportsExecutionMode(&_Kernel.CallOpts, mode)
}

// SupportsModule is a free data retrieval call binding the contract method 0xf2dc691d.
//
// Solidity: function supportsModule(uint256 moduleTypeId) pure returns(bool)
func (_Kernel *KernelCaller) SupportsModule(opts *bind.CallOpts, moduleTypeId *big.Int) (bool, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "supportsModule", moduleTypeId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsModule is a free data retrieval call binding the contract method 0xf2dc691d.
//
// Solidity: function supportsModule(uint256 moduleTypeId) pure returns(bool)
func (_Kernel *KernelSession) SupportsModule(moduleTypeId *big.Int) (bool, error) {
	return _Kernel.Contract.SupportsModule(&_Kernel.CallOpts, moduleTypeId)
}

// SupportsModule is a free data retrieval call binding the contract method 0xf2dc691d.
//
// Solidity: function supportsModule(uint256 moduleTypeId) pure returns(bool)
func (_Kernel *KernelCallerSession) SupportsModule(moduleTypeId *big.Int) (bool, error) {
	return _Kernel.Contract.SupportsModule(&_Kernel.CallOpts, moduleTypeId)
}

// ValidNonceFrom is a free data retrieval call binding the contract method 0x90ef8862.
//
// Solidity: function validNonceFrom() view returns(uint32)
func (_Kernel *KernelCaller) ValidNonceFrom(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "validNonceFrom")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ValidNonceFrom is a free data retrieval call binding the contract method 0x90ef8862.
//
// Solidity: function validNonceFrom() view returns(uint32)
func (_Kernel *KernelSession) ValidNonceFrom() (uint32, error) {
	return _Kernel.Contract.ValidNonceFrom(&_Kernel.CallOpts)
}

// ValidNonceFrom is a free data retrieval call binding the contract method 0x90ef8862.
//
// Solidity: function validNonceFrom() view returns(uint32)
func (_Kernel *KernelCallerSession) ValidNonceFrom() (uint32, error) {
	return _Kernel.Contract.ValidNonceFrom(&_Kernel.CallOpts)
}

// ValidationConfig is a free data retrieval call binding the contract method 0xb8afe17d.
//
// Solidity: function validationConfig(bytes21 vId) view returns((uint32,address))
func (_Kernel *KernelCaller) ValidationConfig(opts *bind.CallOpts, vId [21]byte) (ValidationManagerValidationConfig, error) {
	var out []interface{}
	err := _Kernel.contract.Call(opts, &out, "validationConfig", vId)

	if err != nil {
		return *new(ValidationManagerValidationConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidationManagerValidationConfig)).(*ValidationManagerValidationConfig)

	return out0, err

}

// ValidationConfig is a free data retrieval call binding the contract method 0xb8afe17d.
//
// Solidity: function validationConfig(bytes21 vId) view returns((uint32,address))
func (_Kernel *KernelSession) ValidationConfig(vId [21]byte) (ValidationManagerValidationConfig, error) {
	return _Kernel.Contract.ValidationConfig(&_Kernel.CallOpts, vId)
}

// ValidationConfig is a free data retrieval call binding the contract method 0xb8afe17d.
//
// Solidity: function validationConfig(bytes21 vId) view returns((uint32,address))
func (_Kernel *KernelCallerSession) ValidationConfig(vId [21]byte) (ValidationManagerValidationConfig, error) {
	return _Kernel.Contract.ValidationConfig(&_Kernel.CallOpts, vId)
}

// ChangeRootValidator is a paid mutator transaction binding the contract method 0x52141cd9.
//
// Solidity: function changeRootValidator(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData) payable returns()
func (_Kernel *KernelTransactor) ChangeRootValidator(opts *bind.TransactOpts, _rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "changeRootValidator", _rootValidator, hook, validatorData, hookData)
}

// ChangeRootValidator is a paid mutator transaction binding the contract method 0x52141cd9.
//
// Solidity: function changeRootValidator(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData) payable returns()
func (_Kernel *KernelSession) ChangeRootValidator(_rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.ChangeRootValidator(&_Kernel.TransactOpts, _rootValidator, hook, validatorData, hookData)
}

// ChangeRootValidator is a paid mutator transaction binding the contract method 0x52141cd9.
//
// Solidity: function changeRootValidator(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData) payable returns()
func (_Kernel *KernelTransactorSession) ChangeRootValidator(_rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.ChangeRootValidator(&_Kernel.TransactOpts, _rootValidator, hook, validatorData, hookData)
}

// Execute is a paid mutator transaction binding the contract method 0xe9ae5c53.
//
// Solidity: function execute(bytes32 execMode, bytes executionCalldata) payable returns()
func (_Kernel *KernelTransactor) Execute(opts *bind.TransactOpts, execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "execute", execMode, executionCalldata)
}

// Execute is a paid mutator transaction binding the contract method 0xe9ae5c53.
//
// Solidity: function execute(bytes32 execMode, bytes executionCalldata) payable returns()
func (_Kernel *KernelSession) Execute(execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.Execute(&_Kernel.TransactOpts, execMode, executionCalldata)
}

// Execute is a paid mutator transaction binding the contract method 0xe9ae5c53.
//
// Solidity: function execute(bytes32 execMode, bytes executionCalldata) payable returns()
func (_Kernel *KernelTransactorSession) Execute(execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.Execute(&_Kernel.TransactOpts, execMode, executionCalldata)
}

// ExecuteFromExecutor is a paid mutator transaction binding the contract method 0xd691c964.
//
// Solidity: function executeFromExecutor(bytes32 execMode, bytes executionCalldata) payable returns(bytes[] returnData)
func (_Kernel *KernelTransactor) ExecuteFromExecutor(opts *bind.TransactOpts, execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "executeFromExecutor", execMode, executionCalldata)
}

// ExecuteFromExecutor is a paid mutator transaction binding the contract method 0xd691c964.
//
// Solidity: function executeFromExecutor(bytes32 execMode, bytes executionCalldata) payable returns(bytes[] returnData)
func (_Kernel *KernelSession) ExecuteFromExecutor(execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.ExecuteFromExecutor(&_Kernel.TransactOpts, execMode, executionCalldata)
}

// ExecuteFromExecutor is a paid mutator transaction binding the contract method 0xd691c964.
//
// Solidity: function executeFromExecutor(bytes32 execMode, bytes executionCalldata) payable returns(bytes[] returnData)
func (_Kernel *KernelTransactorSession) ExecuteFromExecutor(execMode [32]byte, executionCalldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.ExecuteFromExecutor(&_Kernel.TransactOpts, execMode, executionCalldata)
}

// ExecuteUserOp is a paid mutator transaction binding the contract method 0x8dd7712f.
//
// Solidity: function executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash) payable returns()
func (_Kernel *KernelTransactor) ExecuteUserOp(opts *bind.TransactOpts, userOp PackedUserOperation, userOpHash [32]byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "executeUserOp", userOp, userOpHash)
}

// ExecuteUserOp is a paid mutator transaction binding the contract method 0x8dd7712f.
//
// Solidity: function executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash) payable returns()
func (_Kernel *KernelSession) ExecuteUserOp(userOp PackedUserOperation, userOpHash [32]byte) (*types.Transaction, error) {
	return _Kernel.Contract.ExecuteUserOp(&_Kernel.TransactOpts, userOp, userOpHash)
}

// ExecuteUserOp is a paid mutator transaction binding the contract method 0x8dd7712f.
//
// Solidity: function executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash) payable returns()
func (_Kernel *KernelTransactorSession) ExecuteUserOp(userOp PackedUserOperation, userOpHash [32]byte) (*types.Transaction, error) {
	return _Kernel.Contract.ExecuteUserOp(&_Kernel.TransactOpts, userOp, userOpHash)
}

// Initialize is a paid mutator transaction binding the contract method 0x3c3b752b.
//
// Solidity: function initialize(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData, bytes[] initConfig) returns()
func (_Kernel *KernelTransactor) Initialize(opts *bind.TransactOpts, _rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte, initConfig [][]byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "initialize", _rootValidator, hook, validatorData, hookData, initConfig)
}

// Initialize is a paid mutator transaction binding the contract method 0x3c3b752b.
//
// Solidity: function initialize(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData, bytes[] initConfig) returns()
func (_Kernel *KernelSession) Initialize(_rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte, initConfig [][]byte) (*types.Transaction, error) {
	return _Kernel.Contract.Initialize(&_Kernel.TransactOpts, _rootValidator, hook, validatorData, hookData, initConfig)
}

// Initialize is a paid mutator transaction binding the contract method 0x3c3b752b.
//
// Solidity: function initialize(bytes21 _rootValidator, address hook, bytes validatorData, bytes hookData, bytes[] initConfig) returns()
func (_Kernel *KernelTransactorSession) Initialize(_rootValidator [21]byte, hook common.Address, validatorData []byte, hookData []byte, initConfig [][]byte) (*types.Transaction, error) {
	return _Kernel.Contract.Initialize(&_Kernel.TransactOpts, _rootValidator, hook, validatorData, hookData, initConfig)
}

// InstallModule is a paid mutator transaction binding the contract method 0x9517e29f.
//
// Solidity: function installModule(uint256 moduleType, address module, bytes initData) payable returns()
func (_Kernel *KernelTransactor) InstallModule(opts *bind.TransactOpts, moduleType *big.Int, module common.Address, initData []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "installModule", moduleType, module, initData)
}

// InstallModule is a paid mutator transaction binding the contract method 0x9517e29f.
//
// Solidity: function installModule(uint256 moduleType, address module, bytes initData) payable returns()
func (_Kernel *KernelSession) InstallModule(moduleType *big.Int, module common.Address, initData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.InstallModule(&_Kernel.TransactOpts, moduleType, module, initData)
}

// InstallModule is a paid mutator transaction binding the contract method 0x9517e29f.
//
// Solidity: function installModule(uint256 moduleType, address module, bytes initData) payable returns()
func (_Kernel *KernelTransactorSession) InstallModule(moduleType *big.Int, module common.Address, initData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.InstallModule(&_Kernel.TransactOpts, moduleType, module, initData)
}

// InstallValidations is a paid mutator transaction binding the contract method 0x9198bdf5.
//
// Solidity: function installValidations(bytes21[] vIds, (uint32,address)[] configs, bytes[] validationData, bytes[] hookData) payable returns()
func (_Kernel *KernelTransactor) InstallValidations(opts *bind.TransactOpts, vIds [][21]byte, configs []ValidationManagerValidationConfig, validationData [][]byte, hookData [][]byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "installValidations", vIds, configs, validationData, hookData)
}

// InstallValidations is a paid mutator transaction binding the contract method 0x9198bdf5.
//
// Solidity: function installValidations(bytes21[] vIds, (uint32,address)[] configs, bytes[] validationData, bytes[] hookData) payable returns()
func (_Kernel *KernelSession) InstallValidations(vIds [][21]byte, configs []ValidationManagerValidationConfig, validationData [][]byte, hookData [][]byte) (*types.Transaction, error) {
	return _Kernel.Contract.InstallValidations(&_Kernel.TransactOpts, vIds, configs, validationData, hookData)
}

// InstallValidations is a paid mutator transaction binding the contract method 0x9198bdf5.
//
// Solidity: function installValidations(bytes21[] vIds, (uint32,address)[] configs, bytes[] validationData, bytes[] hookData) payable returns()
func (_Kernel *KernelTransactorSession) InstallValidations(vIds [][21]byte, configs []ValidationManagerValidationConfig, validationData [][]byte, hookData [][]byte) (*types.Transaction, error) {
	return _Kernel.Contract.InstallValidations(&_Kernel.TransactOpts, vIds, configs, validationData, hookData)
}

// InvalidateNonce is a paid mutator transaction binding the contract method 0x1f1b92e3.
//
// Solidity: function invalidateNonce(uint32 nonce) payable returns()
func (_Kernel *KernelTransactor) InvalidateNonce(opts *bind.TransactOpts, nonce uint32) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "invalidateNonce", nonce)
}

// InvalidateNonce is a paid mutator transaction binding the contract method 0x1f1b92e3.
//
// Solidity: function invalidateNonce(uint32 nonce) payable returns()
func (_Kernel *KernelSession) InvalidateNonce(nonce uint32) (*types.Transaction, error) {
	return _Kernel.Contract.InvalidateNonce(&_Kernel.TransactOpts, nonce)
}

// InvalidateNonce is a paid mutator transaction binding the contract method 0x1f1b92e3.
//
// Solidity: function invalidateNonce(uint32 nonce) payable returns()
func (_Kernel *KernelTransactorSession) InvalidateNonce(nonce uint32) (*types.Transaction, error) {
	return _Kernel.Contract.InvalidateNonce(&_Kernel.TransactOpts, nonce)
}

// UninstallModule is a paid mutator transaction binding the contract method 0xa71763a8.
//
// Solidity: function uninstallModule(uint256 moduleType, address module, bytes deInitData) payable returns()
func (_Kernel *KernelTransactor) UninstallModule(opts *bind.TransactOpts, moduleType *big.Int, module common.Address, deInitData []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "uninstallModule", moduleType, module, deInitData)
}

// UninstallModule is a paid mutator transaction binding the contract method 0xa71763a8.
//
// Solidity: function uninstallModule(uint256 moduleType, address module, bytes deInitData) payable returns()
func (_Kernel *KernelSession) UninstallModule(moduleType *big.Int, module common.Address, deInitData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.UninstallModule(&_Kernel.TransactOpts, moduleType, module, deInitData)
}

// UninstallModule is a paid mutator transaction binding the contract method 0xa71763a8.
//
// Solidity: function uninstallModule(uint256 moduleType, address module, bytes deInitData) payable returns()
func (_Kernel *KernelTransactorSession) UninstallModule(moduleType *big.Int, module common.Address, deInitData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.UninstallModule(&_Kernel.TransactOpts, moduleType, module, deInitData)
}

// UninstallValidation is a paid mutator transaction binding the contract method 0xe6f3d50a.
//
// Solidity: function uninstallValidation(bytes21 vId, bytes deinitData, bytes hookDeinitData) payable returns()
func (_Kernel *KernelTransactor) UninstallValidation(opts *bind.TransactOpts, vId [21]byte, deinitData []byte, hookDeinitData []byte) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "uninstallValidation", vId, deinitData, hookDeinitData)
}

// UninstallValidation is a paid mutator transaction binding the contract method 0xe6f3d50a.
//
// Solidity: function uninstallValidation(bytes21 vId, bytes deinitData, bytes hookDeinitData) payable returns()
func (_Kernel *KernelSession) UninstallValidation(vId [21]byte, deinitData []byte, hookDeinitData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.UninstallValidation(&_Kernel.TransactOpts, vId, deinitData, hookDeinitData)
}

// UninstallValidation is a paid mutator transaction binding the contract method 0xe6f3d50a.
//
// Solidity: function uninstallValidation(bytes21 vId, bytes deinitData, bytes hookDeinitData) payable returns()
func (_Kernel *KernelTransactorSession) UninstallValidation(vId [21]byte, deinitData []byte, hookDeinitData []byte) (*types.Transaction, error) {
	return _Kernel.Contract.UninstallValidation(&_Kernel.TransactOpts, vId, deinitData, hookDeinitData)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address _newImplementation) payable returns()
func (_Kernel *KernelTransactor) UpgradeTo(opts *bind.TransactOpts, _newImplementation common.Address) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "upgradeTo", _newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address _newImplementation) payable returns()
func (_Kernel *KernelSession) UpgradeTo(_newImplementation common.Address) (*types.Transaction, error) {
	return _Kernel.Contract.UpgradeTo(&_Kernel.TransactOpts, _newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address _newImplementation) payable returns()
func (_Kernel *KernelTransactorSession) UpgradeTo(_newImplementation common.Address) (*types.Transaction, error) {
	return _Kernel.Contract.UpgradeTo(&_Kernel.TransactOpts, _newImplementation)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x19822f7c.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) payable returns(uint256 validationData)
func (_Kernel *KernelTransactor) ValidateUserOp(opts *bind.TransactOpts, userOp PackedUserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _Kernel.contract.Transact(opts, "validateUserOp", userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x19822f7c.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) payable returns(uint256 validationData)
func (_Kernel *KernelSession) ValidateUserOp(userOp PackedUserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _Kernel.Contract.ValidateUserOp(&_Kernel.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x19822f7c.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) payable returns(uint256 validationData)
func (_Kernel *KernelTransactorSession) ValidateUserOp(userOp PackedUserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _Kernel.Contract.ValidateUserOp(&_Kernel.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Kernel *KernelTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Kernel.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Kernel *KernelSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.Fallback(&_Kernel.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Kernel *KernelTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Kernel.Contract.Fallback(&_Kernel.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Kernel *KernelTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kernel.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Kernel *KernelSession) Receive() (*types.Transaction, error) {
	return _Kernel.Contract.Receive(&_Kernel.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Kernel *KernelTransactorSession) Receive() (*types.Transaction, error) {
	return _Kernel.Contract.Receive(&_Kernel.TransactOpts)
}

// KernelModuleInstalledIterator is returned from FilterModuleInstalled and is used to iterate over the raw logs and unpacked data for ModuleInstalled events raised by the Kernel contract.
type KernelModuleInstalledIterator struct {
	Event *KernelModuleInstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelModuleInstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelModuleInstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelModuleInstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelModuleInstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelModuleInstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelModuleInstalled represents a ModuleInstalled event raised by the Kernel contract.
type KernelModuleInstalled struct {
	ModuleTypeId *big.Int
	Module       common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterModuleInstalled is a free log retrieval operation binding the contract event 0xd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef123.
//
// Solidity: event ModuleInstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) FilterModuleInstalled(opts *bind.FilterOpts) (*KernelModuleInstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "ModuleInstalled")
	if err != nil {
		return nil, err
	}
	return &KernelModuleInstalledIterator{contract: _Kernel.contract, event: "ModuleInstalled", logs: logs, sub: sub}, nil
}

// WatchModuleInstalled is a free log subscription operation binding the contract event 0xd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef123.
//
// Solidity: event ModuleInstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) WatchModuleInstalled(opts *bind.WatchOpts, sink chan<- *KernelModuleInstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "ModuleInstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelModuleInstalled)
				if err := _Kernel.contract.UnpackLog(event, "ModuleInstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuleInstalled is a log parse operation binding the contract event 0xd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef123.
//
// Solidity: event ModuleInstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) ParseModuleInstalled(log types.Log) (*KernelModuleInstalled, error) {
	event := new(KernelModuleInstalled)
	if err := _Kernel.contract.UnpackLog(event, "ModuleInstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelModuleUninstallResultIterator is returned from FilterModuleUninstallResult and is used to iterate over the raw logs and unpacked data for ModuleUninstallResult events raised by the Kernel contract.
type KernelModuleUninstallResultIterator struct {
	Event *KernelModuleUninstallResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelModuleUninstallResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelModuleUninstallResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelModuleUninstallResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelModuleUninstallResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelModuleUninstallResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelModuleUninstallResult represents a ModuleUninstallResult event raised by the Kernel contract.
type KernelModuleUninstallResult struct {
	Module common.Address
	Result bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterModuleUninstallResult is a free log retrieval operation binding the contract event 0x2b82f87bf66300af618a9621d3f221edfab735f5bacb4e004cce1b62375396c3.
//
// Solidity: event ModuleUninstallResult(address module, bool result)
func (_Kernel *KernelFilterer) FilterModuleUninstallResult(opts *bind.FilterOpts) (*KernelModuleUninstallResultIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "ModuleUninstallResult")
	if err != nil {
		return nil, err
	}
	return &KernelModuleUninstallResultIterator{contract: _Kernel.contract, event: "ModuleUninstallResult", logs: logs, sub: sub}, nil
}

// WatchModuleUninstallResult is a free log subscription operation binding the contract event 0x2b82f87bf66300af618a9621d3f221edfab735f5bacb4e004cce1b62375396c3.
//
// Solidity: event ModuleUninstallResult(address module, bool result)
func (_Kernel *KernelFilterer) WatchModuleUninstallResult(opts *bind.WatchOpts, sink chan<- *KernelModuleUninstallResult) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "ModuleUninstallResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelModuleUninstallResult)
				if err := _Kernel.contract.UnpackLog(event, "ModuleUninstallResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuleUninstallResult is a log parse operation binding the contract event 0x2b82f87bf66300af618a9621d3f221edfab735f5bacb4e004cce1b62375396c3.
//
// Solidity: event ModuleUninstallResult(address module, bool result)
func (_Kernel *KernelFilterer) ParseModuleUninstallResult(log types.Log) (*KernelModuleUninstallResult, error) {
	event := new(KernelModuleUninstallResult)
	if err := _Kernel.contract.UnpackLog(event, "ModuleUninstallResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelModuleUninstalledIterator is returned from FilterModuleUninstalled and is used to iterate over the raw logs and unpacked data for ModuleUninstalled events raised by the Kernel contract.
type KernelModuleUninstalledIterator struct {
	Event *KernelModuleUninstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelModuleUninstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelModuleUninstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelModuleUninstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelModuleUninstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelModuleUninstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelModuleUninstalled represents a ModuleUninstalled event raised by the Kernel contract.
type KernelModuleUninstalled struct {
	ModuleTypeId *big.Int
	Module       common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterModuleUninstalled is a free log retrieval operation binding the contract event 0x341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e.
//
// Solidity: event ModuleUninstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) FilterModuleUninstalled(opts *bind.FilterOpts) (*KernelModuleUninstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "ModuleUninstalled")
	if err != nil {
		return nil, err
	}
	return &KernelModuleUninstalledIterator{contract: _Kernel.contract, event: "ModuleUninstalled", logs: logs, sub: sub}, nil
}

// WatchModuleUninstalled is a free log subscription operation binding the contract event 0x341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e.
//
// Solidity: event ModuleUninstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) WatchModuleUninstalled(opts *bind.WatchOpts, sink chan<- *KernelModuleUninstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "ModuleUninstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelModuleUninstalled)
				if err := _Kernel.contract.UnpackLog(event, "ModuleUninstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuleUninstalled is a log parse operation binding the contract event 0x341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e.
//
// Solidity: event ModuleUninstalled(uint256 moduleTypeId, address module)
func (_Kernel *KernelFilterer) ParseModuleUninstalled(log types.Log) (*KernelModuleUninstalled, error) {
	event := new(KernelModuleUninstalled)
	if err := _Kernel.contract.UnpackLog(event, "ModuleUninstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelNonceInvalidatedIterator is returned from FilterNonceInvalidated and is used to iterate over the raw logs and unpacked data for NonceInvalidated events raised by the Kernel contract.
type KernelNonceInvalidatedIterator struct {
	Event *KernelNonceInvalidated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelNonceInvalidatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelNonceInvalidated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelNonceInvalidated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelNonceInvalidatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelNonceInvalidatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelNonceInvalidated represents a NonceInvalidated event raised by the Kernel contract.
type KernelNonceInvalidated struct {
	Nonce uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNonceInvalidated is a free log retrieval operation binding the contract event 0x44048389cf5623039f43ff2fc5c9039380469a3e80f7af29c0f4079396f7025a.
//
// Solidity: event NonceInvalidated(uint32 nonce)
func (_Kernel *KernelFilterer) FilterNonceInvalidated(opts *bind.FilterOpts) (*KernelNonceInvalidatedIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "NonceInvalidated")
	if err != nil {
		return nil, err
	}
	return &KernelNonceInvalidatedIterator{contract: _Kernel.contract, event: "NonceInvalidated", logs: logs, sub: sub}, nil
}

// WatchNonceInvalidated is a free log subscription operation binding the contract event 0x44048389cf5623039f43ff2fc5c9039380469a3e80f7af29c0f4079396f7025a.
//
// Solidity: event NonceInvalidated(uint32 nonce)
func (_Kernel *KernelFilterer) WatchNonceInvalidated(opts *bind.WatchOpts, sink chan<- *KernelNonceInvalidated) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "NonceInvalidated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelNonceInvalidated)
				if err := _Kernel.contract.UnpackLog(event, "NonceInvalidated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNonceInvalidated is a log parse operation binding the contract event 0x44048389cf5623039f43ff2fc5c9039380469a3e80f7af29c0f4079396f7025a.
//
// Solidity: event NonceInvalidated(uint32 nonce)
func (_Kernel *KernelFilterer) ParseNonceInvalidated(log types.Log) (*KernelNonceInvalidated, error) {
	event := new(KernelNonceInvalidated)
	if err := _Kernel.contract.UnpackLog(event, "NonceInvalidated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelPermissionInstalledIterator is returned from FilterPermissionInstalled and is used to iterate over the raw logs and unpacked data for PermissionInstalled events raised by the Kernel contract.
type KernelPermissionInstalledIterator struct {
	Event *KernelPermissionInstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelPermissionInstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelPermissionInstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelPermissionInstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelPermissionInstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelPermissionInstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelPermissionInstalled represents a PermissionInstalled event raised by the Kernel contract.
type KernelPermissionInstalled struct {
	Permission [4]byte
	Nonce      uint32
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPermissionInstalled is a free log retrieval operation binding the contract event 0x84b4cb4cbaee414a5f9babad727ed2359fcc4625a6a7230b787c5d75ce0893e7.
//
// Solidity: event PermissionInstalled(bytes4 permission, uint32 nonce)
func (_Kernel *KernelFilterer) FilterPermissionInstalled(opts *bind.FilterOpts) (*KernelPermissionInstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "PermissionInstalled")
	if err != nil {
		return nil, err
	}
	return &KernelPermissionInstalledIterator{contract: _Kernel.contract, event: "PermissionInstalled", logs: logs, sub: sub}, nil
}

// WatchPermissionInstalled is a free log subscription operation binding the contract event 0x84b4cb4cbaee414a5f9babad727ed2359fcc4625a6a7230b787c5d75ce0893e7.
//
// Solidity: event PermissionInstalled(bytes4 permission, uint32 nonce)
func (_Kernel *KernelFilterer) WatchPermissionInstalled(opts *bind.WatchOpts, sink chan<- *KernelPermissionInstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "PermissionInstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelPermissionInstalled)
				if err := _Kernel.contract.UnpackLog(event, "PermissionInstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePermissionInstalled is a log parse operation binding the contract event 0x84b4cb4cbaee414a5f9babad727ed2359fcc4625a6a7230b787c5d75ce0893e7.
//
// Solidity: event PermissionInstalled(bytes4 permission, uint32 nonce)
func (_Kernel *KernelFilterer) ParsePermissionInstalled(log types.Log) (*KernelPermissionInstalled, error) {
	event := new(KernelPermissionInstalled)
	if err := _Kernel.contract.UnpackLog(event, "PermissionInstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelPermissionUninstalledIterator is returned from FilterPermissionUninstalled and is used to iterate over the raw logs and unpacked data for PermissionUninstalled events raised by the Kernel contract.
type KernelPermissionUninstalledIterator struct {
	Event *KernelPermissionUninstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelPermissionUninstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelPermissionUninstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelPermissionUninstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelPermissionUninstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelPermissionUninstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelPermissionUninstalled represents a PermissionUninstalled event raised by the Kernel contract.
type KernelPermissionUninstalled struct {
	Permission [4]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPermissionUninstalled is a free log retrieval operation binding the contract event 0xf09670d87cafaafd381f6b9e9778466ed6606b4a389ea5b31ba84170185c5da5.
//
// Solidity: event PermissionUninstalled(bytes4 permission)
func (_Kernel *KernelFilterer) FilterPermissionUninstalled(opts *bind.FilterOpts) (*KernelPermissionUninstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "PermissionUninstalled")
	if err != nil {
		return nil, err
	}
	return &KernelPermissionUninstalledIterator{contract: _Kernel.contract, event: "PermissionUninstalled", logs: logs, sub: sub}, nil
}

// WatchPermissionUninstalled is a free log subscription operation binding the contract event 0xf09670d87cafaafd381f6b9e9778466ed6606b4a389ea5b31ba84170185c5da5.
//
// Solidity: event PermissionUninstalled(bytes4 permission)
func (_Kernel *KernelFilterer) WatchPermissionUninstalled(opts *bind.WatchOpts, sink chan<- *KernelPermissionUninstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "PermissionUninstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelPermissionUninstalled)
				if err := _Kernel.contract.UnpackLog(event, "PermissionUninstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePermissionUninstalled is a log parse operation binding the contract event 0xf09670d87cafaafd381f6b9e9778466ed6606b4a389ea5b31ba84170185c5da5.
//
// Solidity: event PermissionUninstalled(bytes4 permission)
func (_Kernel *KernelFilterer) ParsePermissionUninstalled(log types.Log) (*KernelPermissionUninstalled, error) {
	event := new(KernelPermissionUninstalled)
	if err := _Kernel.contract.UnpackLog(event, "PermissionUninstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the Kernel contract.
type KernelReceivedIterator struct {
	Event *KernelReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelReceived represents a Received event raised by the Kernel contract.
type KernelReceived struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address sender, uint256 amount)
func (_Kernel *KernelFilterer) FilterReceived(opts *bind.FilterOpts) (*KernelReceivedIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &KernelReceivedIterator{contract: _Kernel.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address sender, uint256 amount)
func (_Kernel *KernelFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *KernelReceived) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelReceived)
				if err := _Kernel.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address sender, uint256 amount)
func (_Kernel *KernelFilterer) ParseReceived(log types.Log) (*KernelReceived, error) {
	event := new(KernelReceived)
	if err := _Kernel.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelRootValidatorUpdatedIterator is returned from FilterRootValidatorUpdated and is used to iterate over the raw logs and unpacked data for RootValidatorUpdated events raised by the Kernel contract.
type KernelRootValidatorUpdatedIterator struct {
	Event *KernelRootValidatorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelRootValidatorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelRootValidatorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelRootValidatorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelRootValidatorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelRootValidatorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelRootValidatorUpdated represents a RootValidatorUpdated event raised by the Kernel contract.
type KernelRootValidatorUpdated struct {
	RootValidator [21]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRootValidatorUpdated is a free log retrieval operation binding the contract event 0x6789ec0c85d6458d897a36a70129b101f8b4d84c6e218046c3107373dbcbae88.
//
// Solidity: event RootValidatorUpdated(bytes21 rootValidator)
func (_Kernel *KernelFilterer) FilterRootValidatorUpdated(opts *bind.FilterOpts) (*KernelRootValidatorUpdatedIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "RootValidatorUpdated")
	if err != nil {
		return nil, err
	}
	return &KernelRootValidatorUpdatedIterator{contract: _Kernel.contract, event: "RootValidatorUpdated", logs: logs, sub: sub}, nil
}

// WatchRootValidatorUpdated is a free log subscription operation binding the contract event 0x6789ec0c85d6458d897a36a70129b101f8b4d84c6e218046c3107373dbcbae88.
//
// Solidity: event RootValidatorUpdated(bytes21 rootValidator)
func (_Kernel *KernelFilterer) WatchRootValidatorUpdated(opts *bind.WatchOpts, sink chan<- *KernelRootValidatorUpdated) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "RootValidatorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelRootValidatorUpdated)
				if err := _Kernel.contract.UnpackLog(event, "RootValidatorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRootValidatorUpdated is a log parse operation binding the contract event 0x6789ec0c85d6458d897a36a70129b101f8b4d84c6e218046c3107373dbcbae88.
//
// Solidity: event RootValidatorUpdated(bytes21 rootValidator)
func (_Kernel *KernelFilterer) ParseRootValidatorUpdated(log types.Log) (*KernelRootValidatorUpdated, error) {
	event := new(KernelRootValidatorUpdated)
	if err := _Kernel.contract.UnpackLog(event, "RootValidatorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelSelectorSetIterator is returned from FilterSelectorSet and is used to iterate over the raw logs and unpacked data for SelectorSet events raised by the Kernel contract.
type KernelSelectorSetIterator struct {
	Event *KernelSelectorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelSelectorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelSelectorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelSelectorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelSelectorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelSelectorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelSelectorSet represents a SelectorSet event raised by the Kernel contract.
type KernelSelectorSet struct {
	Selector [4]byte
	VId      [21]byte
	Allowed  bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSelectorSet is a free log retrieval operation binding the contract event 0x9d17cd6d095ac90a655405ab29f30a7ee7e88ef3974c1bf7544bf591043bb71a.
//
// Solidity: event SelectorSet(bytes4 selector, bytes21 vId, bool allowed)
func (_Kernel *KernelFilterer) FilterSelectorSet(opts *bind.FilterOpts) (*KernelSelectorSetIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "SelectorSet")
	if err != nil {
		return nil, err
	}
	return &KernelSelectorSetIterator{contract: _Kernel.contract, event: "SelectorSet", logs: logs, sub: sub}, nil
}

// WatchSelectorSet is a free log subscription operation binding the contract event 0x9d17cd6d095ac90a655405ab29f30a7ee7e88ef3974c1bf7544bf591043bb71a.
//
// Solidity: event SelectorSet(bytes4 selector, bytes21 vId, bool allowed)
func (_Kernel *KernelFilterer) WatchSelectorSet(opts *bind.WatchOpts, sink chan<- *KernelSelectorSet) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "SelectorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelSelectorSet)
				if err := _Kernel.contract.UnpackLog(event, "SelectorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSelectorSet is a log parse operation binding the contract event 0x9d17cd6d095ac90a655405ab29f30a7ee7e88ef3974c1bf7544bf591043bb71a.
//
// Solidity: event SelectorSet(bytes4 selector, bytes21 vId, bool allowed)
func (_Kernel *KernelFilterer) ParseSelectorSet(log types.Log) (*KernelSelectorSet, error) {
	event := new(KernelSelectorSet)
	if err := _Kernel.contract.UnpackLog(event, "SelectorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelTryExecuteUnsuccessfulIterator is returned from FilterTryExecuteUnsuccessful and is used to iterate over the raw logs and unpacked data for TryExecuteUnsuccessful events raised by the Kernel contract.
type KernelTryExecuteUnsuccessfulIterator struct {
	Event *KernelTryExecuteUnsuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelTryExecuteUnsuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelTryExecuteUnsuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelTryExecuteUnsuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelTryExecuteUnsuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelTryExecuteUnsuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelTryExecuteUnsuccessful represents a TryExecuteUnsuccessful event raised by the Kernel contract.
type KernelTryExecuteUnsuccessful struct {
	BatchExecutionindex *big.Int
	Result              []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTryExecuteUnsuccessful is a free log retrieval operation binding the contract event 0xe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb7.
//
// Solidity: event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result)
func (_Kernel *KernelFilterer) FilterTryExecuteUnsuccessful(opts *bind.FilterOpts) (*KernelTryExecuteUnsuccessfulIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "TryExecuteUnsuccessful")
	if err != nil {
		return nil, err
	}
	return &KernelTryExecuteUnsuccessfulIterator{contract: _Kernel.contract, event: "TryExecuteUnsuccessful", logs: logs, sub: sub}, nil
}

// WatchTryExecuteUnsuccessful is a free log subscription operation binding the contract event 0xe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb7.
//
// Solidity: event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result)
func (_Kernel *KernelFilterer) WatchTryExecuteUnsuccessful(opts *bind.WatchOpts, sink chan<- *KernelTryExecuteUnsuccessful) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "TryExecuteUnsuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelTryExecuteUnsuccessful)
				if err := _Kernel.contract.UnpackLog(event, "TryExecuteUnsuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTryExecuteUnsuccessful is a log parse operation binding the contract event 0xe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb7.
//
// Solidity: event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result)
func (_Kernel *KernelFilterer) ParseTryExecuteUnsuccessful(log types.Log) (*KernelTryExecuteUnsuccessful, error) {
	event := new(KernelTryExecuteUnsuccessful)
	if err := _Kernel.contract.UnpackLog(event, "TryExecuteUnsuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Kernel contract.
type KernelUpgradedIterator struct {
	Event *KernelUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelUpgraded represents a Upgraded event raised by the Kernel contract.
type KernelUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Kernel *KernelFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*KernelUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &KernelUpgradedIterator{contract: _Kernel.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Kernel *KernelFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *KernelUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelUpgraded)
				if err := _Kernel.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Kernel *KernelFilterer) ParseUpgraded(log types.Log) (*KernelUpgraded, error) {
	event := new(KernelUpgraded)
	if err := _Kernel.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelValidatorInstalledIterator is returned from FilterValidatorInstalled and is used to iterate over the raw logs and unpacked data for ValidatorInstalled events raised by the Kernel contract.
type KernelValidatorInstalledIterator struct {
	Event *KernelValidatorInstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelValidatorInstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelValidatorInstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelValidatorInstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelValidatorInstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelValidatorInstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelValidatorInstalled represents a ValidatorInstalled event raised by the Kernel contract.
type KernelValidatorInstalled struct {
	Validator common.Address
	Nonce     uint32
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorInstalled is a free log retrieval operation binding the contract event 0x472e89c0e6e95883bfdbfd3259a00530cf76c4e3cb8cbd75a5fcde80b15bed90.
//
// Solidity: event ValidatorInstalled(address validator, uint32 nonce)
func (_Kernel *KernelFilterer) FilterValidatorInstalled(opts *bind.FilterOpts) (*KernelValidatorInstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "ValidatorInstalled")
	if err != nil {
		return nil, err
	}
	return &KernelValidatorInstalledIterator{contract: _Kernel.contract, event: "ValidatorInstalled", logs: logs, sub: sub}, nil
}

// WatchValidatorInstalled is a free log subscription operation binding the contract event 0x472e89c0e6e95883bfdbfd3259a00530cf76c4e3cb8cbd75a5fcde80b15bed90.
//
// Solidity: event ValidatorInstalled(address validator, uint32 nonce)
func (_Kernel *KernelFilterer) WatchValidatorInstalled(opts *bind.WatchOpts, sink chan<- *KernelValidatorInstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "ValidatorInstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelValidatorInstalled)
				if err := _Kernel.contract.UnpackLog(event, "ValidatorInstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorInstalled is a log parse operation binding the contract event 0x472e89c0e6e95883bfdbfd3259a00530cf76c4e3cb8cbd75a5fcde80b15bed90.
//
// Solidity: event ValidatorInstalled(address validator, uint32 nonce)
func (_Kernel *KernelFilterer) ParseValidatorInstalled(log types.Log) (*KernelValidatorInstalled, error) {
	event := new(KernelValidatorInstalled)
	if err := _Kernel.contract.UnpackLog(event, "ValidatorInstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KernelValidatorUninstalledIterator is returned from FilterValidatorUninstalled and is used to iterate over the raw logs and unpacked data for ValidatorUninstalled events raised by the Kernel contract.
type KernelValidatorUninstalledIterator struct {
	Event *KernelValidatorUninstalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KernelValidatorUninstalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KernelValidatorUninstalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KernelValidatorUninstalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KernelValidatorUninstalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KernelValidatorUninstalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KernelValidatorUninstalled represents a ValidatorUninstalled event raised by the Kernel contract.
type KernelValidatorUninstalled struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorUninstalled is a free log retrieval operation binding the contract event 0x62d3ef672cd2691ccc14bdd4ac654ab8023ae9d09d028123bd658b3a848b0728.
//
// Solidity: event ValidatorUninstalled(address validator)
func (_Kernel *KernelFilterer) FilterValidatorUninstalled(opts *bind.FilterOpts) (*KernelValidatorUninstalledIterator, error) {

	logs, sub, err := _Kernel.contract.FilterLogs(opts, "ValidatorUninstalled")
	if err != nil {
		return nil, err
	}
	return &KernelValidatorUninstalledIterator{contract: _Kernel.contract, event: "ValidatorUninstalled", logs: logs, sub: sub}, nil
}

// WatchValidatorUninstalled is a free log subscription operation binding the contract event 0x62d3ef672cd2691ccc14bdd4ac654ab8023ae9d09d028123bd658b3a848b0728.
//
// Solidity: event ValidatorUninstalled(address validator)
func (_Kernel *KernelFilterer) WatchValidatorUninstalled(opts *bind.WatchOpts, sink chan<- *KernelValidatorUninstalled) (event.Subscription, error) {

	logs, sub, err := _Kernel.contract.WatchLogs(opts, "ValidatorUninstalled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KernelValidatorUninstalled)
				if err := _Kernel.contract.UnpackLog(event, "ValidatorUninstalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUninstalled is a log parse operation binding the contract event 0x62d3ef672cd2691ccc14bdd4ac654ab8023ae9d09d028123bd658b3a848b0728.
//
// Solidity: event ValidatorUninstalled(address validator)
func (_Kernel *KernelFilterer) ParseValidatorUninstalled(log types.Log) (*KernelValidatorUninstalled, error) {
	event := new(KernelValidatorUninstalled)
	if err := _Kernel.contract.UnpackLog(event, "ValidatorUninstalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
